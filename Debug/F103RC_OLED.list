
F103RC_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039d4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000854  08003bb8  08003bb8  00013bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800440c  0800440c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800440c  0800440c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800440c  0800440c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800440c  0800440c  0001440c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004410  08004410  00014410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08004420  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08004420  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b3e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017bf  00000000  00000000  00028b73  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007d0  00000000  00000000  0002a338  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000720  00000000  00000000  0002ab08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001916c  00000000  00000000  0002b228  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000834e  00000000  00000000  00044394  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090479  00000000  00000000  0004c6e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dcb5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e40  00000000  00000000  000dcbd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08003ba0 	.word	0x08003ba0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08003ba0 	.word	0x08003ba0

08000224 <WriteCmd>:
#include "OLED.h"
#include "i2c.h"
#include "FONT.h"

void WriteCmd(unsigned char I2C_Command)//写命令
 {
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af04      	add	r7, sp, #16
 800022a:	4603      	mov	r3, r0
 800022c:	71fb      	strb	r3, [r7, #7]

HAL_I2C_Mem_Write(&hi2c1,OLED12846_ADD,COM,I2C_MEMADD_SIZE_8BIT,&I2C_Command,1,100);
 800022e:	2364      	movs	r3, #100	; 0x64
 8000230:	9302      	str	r3, [sp, #8]
 8000232:	2301      	movs	r3, #1
 8000234:	9301      	str	r3, [sp, #4]
 8000236:	1dfb      	adds	r3, r7, #7
 8000238:	9300      	str	r3, [sp, #0]
 800023a:	2301      	movs	r3, #1
 800023c:	2200      	movs	r2, #0
 800023e:	2178      	movs	r1, #120	; 0x78
 8000240:	4803      	ldr	r0, [pc, #12]	; (8000250 <WriteCmd+0x2c>)
 8000242:	f001 f8ab 	bl	800139c <HAL_I2C_Mem_Write>
	
 }   // 固定为&hi2c1，芯片或者屏幕型号，函数中的对象（例如Cmd），固定为I2C_MEMADD_SIZE_8BIT，函数中的声明对象地址
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	20000028 	.word	0x20000028

08000254 <WriteDat>:
		
void WriteDat(unsigned char I2C_Data)//写数据
 
 {
 8000254:	b580      	push	{r7, lr}
 8000256:	b086      	sub	sp, #24
 8000258:	af04      	add	r7, sp, #16
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]

		HAL_I2C_Mem_Write(&hi2c1,OLED12846_ADD,DAT,I2C_MEMADD_SIZE_8BIT,&I2C_Data,1,100);
 800025e:	2364      	movs	r3, #100	; 0x64
 8000260:	9302      	str	r3, [sp, #8]
 8000262:	2301      	movs	r3, #1
 8000264:	9301      	str	r3, [sp, #4]
 8000266:	1dfb      	adds	r3, r7, #7
 8000268:	9300      	str	r3, [sp, #0]
 800026a:	2301      	movs	r3, #1
 800026c:	2240      	movs	r2, #64	; 0x40
 800026e:	2178      	movs	r1, #120	; 0x78
 8000270:	4803      	ldr	r0, [pc, #12]	; (8000280 <WriteDat+0x2c>)
 8000272:	f001 f893 	bl	800139c <HAL_I2C_Mem_Write>
	
  }
 8000276:	bf00      	nop
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	20000028 	.word	0x20000028

08000284 <OLED_Init>:
 
	void OLED_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	HAL_Delay(100); 
 8000288:	2064      	movs	r0, #100	; 0x64
 800028a:	f000 fb89 	bl	80009a0 <HAL_Delay>
	
	WriteCmd(0xAE); //display off
 800028e:	20ae      	movs	r0, #174	; 0xae
 8000290:	f7ff ffc8 	bl	8000224 <WriteCmd>
	WriteCmd(0x20);	//Set Memory Addressing Mode	
 8000294:	2020      	movs	r0, #32
 8000296:	f7ff ffc5 	bl	8000224 <WriteCmd>
	WriteCmd(0x10);	//00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800029a:	2010      	movs	r0, #16
 800029c:	f7ff ffc2 	bl	8000224 <WriteCmd>
	WriteCmd(0xb0);	//Set Page Start Address for Page Addressing Mode,0-7
 80002a0:	20b0      	movs	r0, #176	; 0xb0
 80002a2:	f7ff ffbf 	bl	8000224 <WriteCmd>
	WriteCmd(0xc8);	//Set COM Output Scan Direction
 80002a6:	20c8      	movs	r0, #200	; 0xc8
 80002a8:	f7ff ffbc 	bl	8000224 <WriteCmd>
	WriteCmd(0x00); //---set low column address
 80002ac:	2000      	movs	r0, #0
 80002ae:	f7ff ffb9 	bl	8000224 <WriteCmd>
	WriteCmd(0x10); //---set high column address
 80002b2:	2010      	movs	r0, #16
 80002b4:	f7ff ffb6 	bl	8000224 <WriteCmd>
	WriteCmd(0x40); //--set start line address
 80002b8:	2040      	movs	r0, #64	; 0x40
 80002ba:	f7ff ffb3 	bl	8000224 <WriteCmd>
	WriteCmd(0x81); //--set contrast control register
 80002be:	2081      	movs	r0, #129	; 0x81
 80002c0:	f7ff ffb0 	bl	8000224 <WriteCmd>
	WriteCmd(0xff); //亮度调节 0x00~0xff
 80002c4:	20ff      	movs	r0, #255	; 0xff
 80002c6:	f7ff ffad 	bl	8000224 <WriteCmd>
	WriteCmd(0xa1); //--set segment re-map 0 to 127
 80002ca:	20a1      	movs	r0, #161	; 0xa1
 80002cc:	f7ff ffaa 	bl	8000224 <WriteCmd>
	WriteCmd(0xa6); //--set normal display
 80002d0:	20a6      	movs	r0, #166	; 0xa6
 80002d2:	f7ff ffa7 	bl	8000224 <WriteCmd>
	WriteCmd(0xa8); //--set multiplex ratio(1 to 64)
 80002d6:	20a8      	movs	r0, #168	; 0xa8
 80002d8:	f7ff ffa4 	bl	8000224 <WriteCmd>
	WriteCmd(0x3F); //
 80002dc:	203f      	movs	r0, #63	; 0x3f
 80002de:	f7ff ffa1 	bl	8000224 <WriteCmd>
	WriteCmd(0xa4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80002e2:	20a4      	movs	r0, #164	; 0xa4
 80002e4:	f7ff ff9e 	bl	8000224 <WriteCmd>
	WriteCmd(0xd3); //-set display offset
 80002e8:	20d3      	movs	r0, #211	; 0xd3
 80002ea:	f7ff ff9b 	bl	8000224 <WriteCmd>
	WriteCmd(0x00); //-not offset
 80002ee:	2000      	movs	r0, #0
 80002f0:	f7ff ff98 	bl	8000224 <WriteCmd>
	WriteCmd(0xd5); //--set display clock divide ratio/oscillator frequency
 80002f4:	20d5      	movs	r0, #213	; 0xd5
 80002f6:	f7ff ff95 	bl	8000224 <WriteCmd>
	WriteCmd(0xf0); //--set divide ratio
 80002fa:	20f0      	movs	r0, #240	; 0xf0
 80002fc:	f7ff ff92 	bl	8000224 <WriteCmd>
	WriteCmd(0xd9); //--set pre-charge period
 8000300:	20d9      	movs	r0, #217	; 0xd9
 8000302:	f7ff ff8f 	bl	8000224 <WriteCmd>
	WriteCmd(0x22); //
 8000306:	2022      	movs	r0, #34	; 0x22
 8000308:	f7ff ff8c 	bl	8000224 <WriteCmd>
	WriteCmd(0xda); //--set com pins hardware configuration
 800030c:	20da      	movs	r0, #218	; 0xda
 800030e:	f7ff ff89 	bl	8000224 <WriteCmd>
	WriteCmd(0x12);
 8000312:	2012      	movs	r0, #18
 8000314:	f7ff ff86 	bl	8000224 <WriteCmd>
	WriteCmd(0xdb); //--set vcomh
 8000318:	20db      	movs	r0, #219	; 0xdb
 800031a:	f7ff ff83 	bl	8000224 <WriteCmd>
	WriteCmd(0x20); //0x20,0.77xVcc
 800031e:	2020      	movs	r0, #32
 8000320:	f7ff ff80 	bl	8000224 <WriteCmd>
	WriteCmd(0x8d); //--set DC-DC enable
 8000324:	208d      	movs	r0, #141	; 0x8d
 8000326:	f7ff ff7d 	bl	8000224 <WriteCmd>
	WriteCmd(0x14); //
 800032a:	2014      	movs	r0, #20
 800032c:	f7ff ff7a 	bl	8000224 <WriteCmd>
	WriteCmd(0xaf); //--turn on oled panel
 8000330:	20af      	movs	r0, #175	; 0xaf
 8000332:	f7ff ff77 	bl	8000224 <WriteCmd>
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}

0800033a <OLED_SetPos>:

void OLED_SetPos(unsigned char x, unsigned char y) //设置起始点坐标
{ 
 800033a:	b580      	push	{r7, lr}
 800033c:	b082      	sub	sp, #8
 800033e:	af00      	add	r7, sp, #0
 8000340:	4603      	mov	r3, r0
 8000342:	460a      	mov	r2, r1
 8000344:	71fb      	strb	r3, [r7, #7]
 8000346:	4613      	mov	r3, r2
 8000348:	71bb      	strb	r3, [r7, #6]
	WriteCmd(0xb0+y);
 800034a:	79bb      	ldrb	r3, [r7, #6]
 800034c:	3b50      	subs	r3, #80	; 0x50
 800034e:	b2db      	uxtb	r3, r3
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ff67 	bl	8000224 <WriteCmd>
	WriteCmd(((x&0xf0)>>4)|0x10);
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	091b      	lsrs	r3, r3, #4
 800035a:	b2db      	uxtb	r3, r3
 800035c:	f043 0310 	orr.w	r3, r3, #16
 8000360:	b2db      	uxtb	r3, r3
 8000362:	4618      	mov	r0, r3
 8000364:	f7ff ff5e 	bl	8000224 <WriteCmd>
	WriteCmd((x&0x0f)|0x01);
 8000368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800036c:	f003 030e 	and.w	r3, r3, #14
 8000370:	b25b      	sxtb	r3, r3
 8000372:	f043 0301 	orr.w	r3, r3, #1
 8000376:	b25b      	sxtb	r3, r3
 8000378:	b2db      	uxtb	r3, r3
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ff52 	bl	8000224 <WriteCmd>
}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <OLED_Fill>:

void OLED_Fill(unsigned char fill_Data)//全屏填充
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]
	unsigned char m,n;
	for(m=0;m<8;m++)
 8000392:	2300      	movs	r3, #0
 8000394:	73fb      	strb	r3, [r7, #15]
 8000396:	e01c      	b.n	80003d2 <OLED_Fill+0x4a>
	{
		WriteCmd(0xb0+m);		//page0-page1
 8000398:	7bfb      	ldrb	r3, [r7, #15]
 800039a:	3b50      	subs	r3, #80	; 0x50
 800039c:	b2db      	uxtb	r3, r3
 800039e:	4618      	mov	r0, r3
 80003a0:	f7ff ff40 	bl	8000224 <WriteCmd>
		WriteCmd(0x00);		//low column start address
 80003a4:	2000      	movs	r0, #0
 80003a6:	f7ff ff3d 	bl	8000224 <WriteCmd>
		WriteCmd(0x10);		//high column start address
 80003aa:	2010      	movs	r0, #16
 80003ac:	f7ff ff3a 	bl	8000224 <WriteCmd>
		for(n=0;n<128;n++)
 80003b0:	2300      	movs	r3, #0
 80003b2:	73bb      	strb	r3, [r7, #14]
 80003b4:	e006      	b.n	80003c4 <OLED_Fill+0x3c>
			{
				WriteDat(fill_Data);
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff ff4b 	bl	8000254 <WriteDat>
		for(n=0;n<128;n++)
 80003be:	7bbb      	ldrb	r3, [r7, #14]
 80003c0:	3301      	adds	r3, #1
 80003c2:	73bb      	strb	r3, [r7, #14]
 80003c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	daf4      	bge.n	80003b6 <OLED_Fill+0x2e>
	for(m=0;m<8;m++)
 80003cc:	7bfb      	ldrb	r3, [r7, #15]
 80003ce:	3301      	adds	r3, #1
 80003d0:	73fb      	strb	r3, [r7, #15]
 80003d2:	7bfb      	ldrb	r3, [r7, #15]
 80003d4:	2b07      	cmp	r3, #7
 80003d6:	d9df      	bls.n	8000398 <OLED_Fill+0x10>
			}
	}
}
 80003d8:	bf00      	nop
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}

080003e0 <OLED_Clear>:


void OLED_Clear(void)//清屏
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	OLED_Fill(0x00);
 80003e4:	2000      	movs	r0, #0
 80003e6:	f7ff ffcf 	bl	8000388 <OLED_Fill>
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
	...

080003f0 <OLED_ShowStr>:


// Parameters     : x,y -- 起始点坐标(x:0~127, y:0~7); ch[] -- 要显示的字符串; TextSize -- 字符大小(1:6*8 ; 2:8*16)
// Description    : 显示codetab.h中的ASCII字符,有6*8和8*16可选择
void OLED_ShowStr(unsigned char x, unsigned char y, unsigned char ch[], unsigned char TextSize)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	603a      	str	r2, [r7, #0]
 80003f8:	461a      	mov	r2, r3
 80003fa:	4603      	mov	r3, r0
 80003fc:	71fb      	strb	r3, [r7, #7]
 80003fe:	460b      	mov	r3, r1
 8000400:	71bb      	strb	r3, [r7, #6]
 8000402:	4613      	mov	r3, r2
 8000404:	717b      	strb	r3, [r7, #5]
	unsigned char c = 0,i = 0,j = 0;
 8000406:	2300      	movs	r3, #0
 8000408:	737b      	strb	r3, [r7, #13]
 800040a:	2300      	movs	r3, #0
 800040c:	73fb      	strb	r3, [r7, #15]
 800040e:	2300      	movs	r3, #0
 8000410:	73bb      	strb	r3, [r7, #14]
	switch(TextSize)
 8000412:	797b      	ldrb	r3, [r7, #5]
 8000414:	2b01      	cmp	r3, #1
 8000416:	d032      	beq.n	800047e <OLED_ShowStr+0x8e>
 8000418:	2b02      	cmp	r3, #2
 800041a:	d07e      	beq.n	800051a <OLED_ShowStr+0x12a>
				x += 8;
				j++;
			}
		}break;
	}
}
 800041c:	e084      	b.n	8000528 <OLED_ShowStr+0x138>
				c = ch[j] - 32;
 800041e:	7bbb      	ldrb	r3, [r7, #14]
 8000420:	683a      	ldr	r2, [r7, #0]
 8000422:	4413      	add	r3, r2
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	3b20      	subs	r3, #32
 8000428:	737b      	strb	r3, [r7, #13]
				if(x > 126)
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	2b7e      	cmp	r3, #126	; 0x7e
 800042e:	d904      	bls.n	800043a <OLED_ShowStr+0x4a>
					x = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	71fb      	strb	r3, [r7, #7]
					y++;
 8000434:	79bb      	ldrb	r3, [r7, #6]
 8000436:	3301      	adds	r3, #1
 8000438:	71bb      	strb	r3, [r7, #6]
				OLED_SetPos(x,y);
 800043a:	79ba      	ldrb	r2, [r7, #6]
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	4611      	mov	r1, r2
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff ff7a 	bl	800033a <OLED_SetPos>
				for(i=0;i<6;i++)
 8000446:	2300      	movs	r3, #0
 8000448:	73fb      	strb	r3, [r7, #15]
 800044a:	e00f      	b.n	800046c <OLED_ShowStr+0x7c>
					WriteDat(F6x8[c][i]);
 800044c:	7b7a      	ldrb	r2, [r7, #13]
 800044e:	7bf9      	ldrb	r1, [r7, #15]
 8000450:	4837      	ldr	r0, [pc, #220]	; (8000530 <OLED_ShowStr+0x140>)
 8000452:	4613      	mov	r3, r2
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	4413      	add	r3, r2
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	4403      	add	r3, r0
 800045c:	440b      	add	r3, r1
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff fef7 	bl	8000254 <WriteDat>
				for(i=0;i<6;i++)
 8000466:	7bfb      	ldrb	r3, [r7, #15]
 8000468:	3301      	adds	r3, #1
 800046a:	73fb      	strb	r3, [r7, #15]
 800046c:	7bfb      	ldrb	r3, [r7, #15]
 800046e:	2b05      	cmp	r3, #5
 8000470:	d9ec      	bls.n	800044c <OLED_ShowStr+0x5c>
				x += 6;
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	3306      	adds	r3, #6
 8000476:	71fb      	strb	r3, [r7, #7]
				j++;
 8000478:	7bbb      	ldrb	r3, [r7, #14]
 800047a:	3301      	adds	r3, #1
 800047c:	73bb      	strb	r3, [r7, #14]
			while(ch[j] != '\0')
 800047e:	7bbb      	ldrb	r3, [r7, #14]
 8000480:	683a      	ldr	r2, [r7, #0]
 8000482:	4413      	add	r3, r2
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d1c9      	bne.n	800041e <OLED_ShowStr+0x2e>
		}break;
 800048a:	e04d      	b.n	8000528 <OLED_ShowStr+0x138>
				c = ch[j] - 32;
 800048c:	7bbb      	ldrb	r3, [r7, #14]
 800048e:	683a      	ldr	r2, [r7, #0]
 8000490:	4413      	add	r3, r2
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	3b20      	subs	r3, #32
 8000496:	737b      	strb	r3, [r7, #13]
				if(x > 120)
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	2b78      	cmp	r3, #120	; 0x78
 800049c:	d904      	bls.n	80004a8 <OLED_ShowStr+0xb8>
					x = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	71fb      	strb	r3, [r7, #7]
					y++;
 80004a2:	79bb      	ldrb	r3, [r7, #6]
 80004a4:	3301      	adds	r3, #1
 80004a6:	71bb      	strb	r3, [r7, #6]
				OLED_SetPos(x,y);
 80004a8:	79ba      	ldrb	r2, [r7, #6]
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	4611      	mov	r1, r2
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff ff43 	bl	800033a <OLED_SetPos>
				for(i=0;i<8;i++)
 80004b4:	2300      	movs	r3, #0
 80004b6:	73fb      	strb	r3, [r7, #15]
 80004b8:	e00b      	b.n	80004d2 <OLED_ShowStr+0xe2>
					WriteDat(F8X16[c*16+i]);
 80004ba:	7b7b      	ldrb	r3, [r7, #13]
 80004bc:	011a      	lsls	r2, r3, #4
 80004be:	7bfb      	ldrb	r3, [r7, #15]
 80004c0:	4413      	add	r3, r2
 80004c2:	4a1c      	ldr	r2, [pc, #112]	; (8000534 <OLED_ShowStr+0x144>)
 80004c4:	5cd3      	ldrb	r3, [r2, r3]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f7ff fec4 	bl	8000254 <WriteDat>
				for(i=0;i<8;i++)
 80004cc:	7bfb      	ldrb	r3, [r7, #15]
 80004ce:	3301      	adds	r3, #1
 80004d0:	73fb      	strb	r3, [r7, #15]
 80004d2:	7bfb      	ldrb	r3, [r7, #15]
 80004d4:	2b07      	cmp	r3, #7
 80004d6:	d9f0      	bls.n	80004ba <OLED_ShowStr+0xca>
				OLED_SetPos(x,y+1);
 80004d8:	79bb      	ldrb	r3, [r7, #6]
 80004da:	3301      	adds	r3, #1
 80004dc:	b2da      	uxtb	r2, r3
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	4611      	mov	r1, r2
 80004e2:	4618      	mov	r0, r3
 80004e4:	f7ff ff29 	bl	800033a <OLED_SetPos>
				for(i=0;i<8;i++)
 80004e8:	2300      	movs	r3, #0
 80004ea:	73fb      	strb	r3, [r7, #15]
 80004ec:	e00c      	b.n	8000508 <OLED_ShowStr+0x118>
					WriteDat(F8X16[c*16+i+8]);
 80004ee:	7b7b      	ldrb	r3, [r7, #13]
 80004f0:	011a      	lsls	r2, r3, #4
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	4413      	add	r3, r2
 80004f6:	3308      	adds	r3, #8
 80004f8:	4a0e      	ldr	r2, [pc, #56]	; (8000534 <OLED_ShowStr+0x144>)
 80004fa:	5cd3      	ldrb	r3, [r2, r3]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff fea9 	bl	8000254 <WriteDat>
				for(i=0;i<8;i++)
 8000502:	7bfb      	ldrb	r3, [r7, #15]
 8000504:	3301      	adds	r3, #1
 8000506:	73fb      	strb	r3, [r7, #15]
 8000508:	7bfb      	ldrb	r3, [r7, #15]
 800050a:	2b07      	cmp	r3, #7
 800050c:	d9ef      	bls.n	80004ee <OLED_ShowStr+0xfe>
				x += 8;
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	3308      	adds	r3, #8
 8000512:	71fb      	strb	r3, [r7, #7]
				j++;
 8000514:	7bbb      	ldrb	r3, [r7, #14]
 8000516:	3301      	adds	r3, #1
 8000518:	73bb      	strb	r3, [r7, #14]
			while(ch[j] != '\0')
 800051a:	7bbb      	ldrb	r3, [r7, #14]
 800051c:	683a      	ldr	r2, [r7, #0]
 800051e:	4413      	add	r3, r2
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d1b2      	bne.n	800048c <OLED_ShowStr+0x9c>
		}break;
 8000526:	bf00      	nop
}
 8000528:	bf00      	nop
 800052a:	3710      	adds	r7, #16
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	08003bdc 	.word	0x08003bdc
 8000534:	08003e04 	.word	0x08003e04

08000538 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053e:	f107 0310 	add.w	r3, r7, #16
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800054c:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <MX_GPIO_Init+0x90>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	4a1d      	ldr	r2, [pc, #116]	; (80005c8 <MX_GPIO_Init+0x90>)
 8000552:	f043 0320 	orr.w	r3, r3, #32
 8000556:	6193      	str	r3, [r2, #24]
 8000558:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <MX_GPIO_Init+0x90>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	f003 0320 	and.w	r3, r3, #32
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000564:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <MX_GPIO_Init+0x90>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a17      	ldr	r2, [pc, #92]	; (80005c8 <MX_GPIO_Init+0x90>)
 800056a:	f043 0304 	orr.w	r3, r3, #4
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <MX_GPIO_Init+0x90>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f003 0304 	and.w	r3, r3, #4
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057c:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <MX_GPIO_Init+0x90>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a11      	ldr	r2, [pc, #68]	; (80005c8 <MX_GPIO_Init+0x90>)
 8000582:	f043 0308 	orr.w	r3, r3, #8
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <MX_GPIO_Init+0x90>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f003 0308 	and.w	r3, r3, #8
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 7180 	mov.w	r1, #256	; 0x100
 800059a:	480c      	ldr	r0, [pc, #48]	; (80005cc <MX_GPIO_Init+0x94>)
 800059c:	f000 fdae 	bl	80010fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80005a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a6:	2301      	movs	r3, #1
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ae:	2302      	movs	r3, #2
 80005b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b2:	f107 0310 	add.w	r3, r7, #16
 80005b6:	4619      	mov	r1, r3
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <MX_GPIO_Init+0x94>)
 80005ba:	f000 fc35 	bl	8000e28 <HAL_GPIO_Init>

}
 80005be:	bf00      	nop
 80005c0:	3720      	adds	r7, #32
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40010800 	.word	0x40010800

080005d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <MX_I2C1_Init+0x50>)
 80005d6:	4a13      	ldr	r2, [pc, #76]	; (8000624 <MX_I2C1_Init+0x54>)
 80005d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_I2C1_Init+0x50>)
 80005dc:	4a12      	ldr	r2, [pc, #72]	; (8000628 <MX_I2C1_Init+0x58>)
 80005de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005e0:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <MX_I2C1_Init+0x50>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MX_I2C1_Init+0x50>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <MX_I2C1_Init+0x50>)
 80005ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <MX_I2C1_Init+0x50>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_I2C1_Init+0x50>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <MX_I2C1_Init+0x50>)
 800060e:	f000 fd8d 	bl	800112c <HAL_I2C_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000618:	f000 f8c2 	bl	80007a0 <Error_Handler>
  }

}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000028 	.word	0x20000028
 8000624:	40005400 	.word	0x40005400
 8000628:	000186a0 	.word	0x000186a0

0800062c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a1d      	ldr	r2, [pc, #116]	; (80006bc <HAL_I2C_MspInit+0x90>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d133      	bne.n	80006b4 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800064c:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <HAL_I2C_MspInit+0x94>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a1b      	ldr	r2, [pc, #108]	; (80006c0 <HAL_I2C_MspInit+0x94>)
 8000652:	f043 0308 	orr.w	r3, r3, #8
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <HAL_I2C_MspInit+0x94>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f003 0308 	and.w	r3, r3, #8
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000664:	23c0      	movs	r3, #192	; 0xc0
 8000666:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000668:	2312      	movs	r3, #18
 800066a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800066c:	2303      	movs	r3, #3
 800066e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	4619      	mov	r1, r3
 8000676:	4813      	ldr	r0, [pc, #76]	; (80006c4 <HAL_I2C_MspInit+0x98>)
 8000678:	f000 fbd6 	bl	8000e28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800067c:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <HAL_I2C_MspInit+0x94>)
 800067e:	69db      	ldr	r3, [r3, #28]
 8000680:	4a0f      	ldr	r2, [pc, #60]	; (80006c0 <HAL_I2C_MspInit+0x94>)
 8000682:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000686:	61d3      	str	r3, [r2, #28]
 8000688:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <HAL_I2C_MspInit+0x94>)
 800068a:	69db      	ldr	r3, [r3, #28]
 800068c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000694:	2200      	movs	r2, #0
 8000696:	2100      	movs	r1, #0
 8000698:	201f      	movs	r0, #31
 800069a:	f000 fa7a 	bl	8000b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800069e:	201f      	movs	r0, #31
 80006a0:	f000 fa93 	bl	8000bca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2100      	movs	r1, #0
 80006a8:	2020      	movs	r0, #32
 80006aa:	f000 fa72 	bl	8000b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80006ae:	2020      	movs	r0, #32
 80006b0:	f000 fa8b 	bl	8000bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006b4:	bf00      	nop
 80006b6:	3720      	adds	r7, #32
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40005400 	.word	0x40005400
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40010c00 	.word	0x40010c00

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006cc:	f000 f906 	bl	80008dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d0:	f000 f826 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d4:	f7ff ff30 	bl	8000538 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006d8:	f7ff ff7a 	bl	80005d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 80006dc:	f7ff fdd2 	bl	8000284 <OLED_Init>
  OLED_Clear();
 80006e0:	f7ff fe7e 	bl	80003e0 <OLED_Clear>

  	OLED_ShowStr(10,30,"STM32CUBEIDE",1);
 80006e4:	2301      	movs	r3, #1
 80006e6:	4a0c      	ldr	r2, [pc, #48]	; (8000718 <main+0x50>)
 80006e8:	211e      	movs	r1, #30
 80006ea:	200a      	movs	r0, #10
 80006ec:	f7ff fe80 	bl	80003f0 <OLED_ShowStr>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f6:	4809      	ldr	r0, [pc, #36]	; (800071c <main+0x54>)
 80006f8:	f000 fd00 	bl	80010fc <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80006fc:	20c8      	movs	r0, #200	; 0xc8
 80006fe:	f000 f94f 	bl	80009a0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <main+0x54>)
 800070a:	f000 fcf7 	bl	80010fc <HAL_GPIO_WritePin>
		  HAL_Delay(200);
 800070e:	20c8      	movs	r0, #200	; 0xc8
 8000710:	f000 f946 	bl	80009a0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000714:	e7ec      	b.n	80006f0 <main+0x28>
 8000716:	bf00      	nop
 8000718:	08003bb8 	.word	0x08003bb8
 800071c:	40010800 	.word	0x40010800

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b090      	sub	sp, #64	; 0x40
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0318 	add.w	r3, r7, #24
 800072a:	2228      	movs	r2, #40	; 0x28
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f003 fa2e 	bl	8003b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000742:	2302      	movs	r3, #2
 8000744:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000746:	2301      	movs	r3, #1
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074a:	2310      	movs	r3, #16
 800074c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074e:	2302      	movs	r3, #2
 8000750:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000752:	2300      	movs	r3, #0
 8000754:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000756:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800075a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0318 	add.w	r3, r7, #24
 8000760:	4618      	mov	r0, r3
 8000762:	f002 fde9 	bl	8003338 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800076c:	f000 f818 	bl	80007a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	2302      	movs	r3, #2
 8000776:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2101      	movs	r1, #1
 8000788:	4618      	mov	r0, r3
 800078a:	f003 f855 	bl	8003838 <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000794:	f000 f804 	bl	80007a0 <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3740      	adds	r7, #64	; 0x40
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <Error_Handler+0x6>

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <HAL_MspInit+0x5c>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	4a14      	ldr	r2, [pc, #80]	; (8000804 <HAL_MspInit+0x5c>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6193      	str	r3, [r2, #24]
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_MspInit+0x5c>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <HAL_MspInit+0x5c>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <HAL_MspInit+0x5c>)
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d0:	61d3      	str	r3, [r2, #28]
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <HAL_MspInit+0x5c>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <HAL_MspInit+0x60>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	4a04      	ldr	r2, [pc, #16]	; (8000808 <HAL_MspInit+0x60>)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fa:	bf00      	nop
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	40021000 	.word	0x40021000
 8000808:	40010000 	.word	0x40010000

0800080c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <NMI_Handler+0x4>

08000812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <HardFault_Handler+0x4>

08000818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <MemManage_Handler+0x4>

0800081e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <BusFault_Handler+0x4>

08000824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <UsageFault_Handler+0x4>

0800082a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr

08000836 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr

08000842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr

0800084e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000852:	f000 f889 	bl	8000968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000860:	4802      	ldr	r0, [pc, #8]	; (800086c <I2C1_EV_IRQHandler+0x10>)
 8000862:	f000 fe95 	bl	8001590 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000028 	.word	0x20000028

08000870 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000874:	4802      	ldr	r0, [pc, #8]	; (8000880 <I2C1_ER_IRQHandler+0x10>)
 8000876:	f000 fff8 	bl	800186a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000028 	.word	0x20000028

08000884 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000890:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000892:	e003      	b.n	800089c <LoopCopyDataInit>

08000894 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000896:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000898:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800089a:	3104      	adds	r1, #4

0800089c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800089c:	480a      	ldr	r0, [pc, #40]	; (80008c8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80008a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008a4:	d3f6      	bcc.n	8000894 <CopyDataInit>
  ldr r2, =_sbss
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008a8:	e002      	b.n	80008b0 <LoopFillZerobss>

080008aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008ac:	f842 3b04 	str.w	r3, [r2], #4

080008b0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008b4:	d3f9      	bcc.n	80008aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008b6:	f7ff ffe5 	bl	8000884 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ba:	f003 f945 	bl	8003b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008be:	f7ff ff03 	bl	80006c8 <main>
  bx lr
 80008c2:	4770      	bx	lr
  ldr r3, =_sidata
 80008c4:	08004414 	.word	0x08004414
  ldr r0, =_sdata
 80008c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80008d0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80008d4:	20000080 	.word	0x20000080

080008d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d8:	e7fe      	b.n	80008d8 <ADC1_2_IRQHandler>
	...

080008dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <HAL_Init+0x28>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a07      	ldr	r2, [pc, #28]	; (8000904 <HAL_Init+0x28>)
 80008e6:	f043 0310 	orr.w	r3, r3, #16
 80008ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ec:	2003      	movs	r0, #3
 80008ee:	f000 f945 	bl	8000b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008f2:	2000      	movs	r0, #0
 80008f4:	f000 f808 	bl	8000908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f8:	f7ff ff56 	bl	80007a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40022000 	.word	0x40022000

08000908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_InitTick+0x54>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_InitTick+0x58>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000922:	fbb2 f3f3 	udiv	r3, r2, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f95d 	bl	8000be6 <HAL_SYSTICK_Config>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	e00e      	b.n	8000954 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2b0f      	cmp	r3, #15
 800093a:	d80a      	bhi.n	8000952 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800093c:	2200      	movs	r2, #0
 800093e:	6879      	ldr	r1, [r7, #4]
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	f000 f925 	bl	8000b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <HAL_InitTick+0x5c>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800094e:	2300      	movs	r3, #0
 8000950:	e000      	b.n	8000954 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
}
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000000 	.word	0x20000000
 8000960:	20000008 	.word	0x20000008
 8000964:	20000004 	.word	0x20000004

08000968 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <HAL_IncTick+0x1c>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	4b05      	ldr	r3, [pc, #20]	; (8000988 <HAL_IncTick+0x20>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4413      	add	r3, r2
 8000978:	4a03      	ldr	r2, [pc, #12]	; (8000988 <HAL_IncTick+0x20>)
 800097a:	6013      	str	r3, [r2, #0]
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	20000008 	.word	0x20000008
 8000988:	2000007c 	.word	0x2000007c

0800098c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return uwTick;
 8000990:	4b02      	ldr	r3, [pc, #8]	; (800099c <HAL_GetTick+0x10>)
 8000992:	681b      	ldr	r3, [r3, #0]
}
 8000994:	4618      	mov	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	2000007c 	.word	0x2000007c

080009a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a8:	f7ff fff0 	bl	800098c <HAL_GetTick>
 80009ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b8:	d005      	beq.n	80009c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <HAL_Delay+0x40>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	461a      	mov	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	4413      	add	r3, r2
 80009c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009c6:	bf00      	nop
 80009c8:	f7ff ffe0 	bl	800098c <HAL_GetTick>
 80009cc:	4602      	mov	r2, r0
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d8f7      	bhi.n	80009c8 <HAL_Delay+0x28>
  {
  }
}
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000008 	.word	0x20000008

080009e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <__NVIC_SetPriorityGrouping+0x44>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a00:	4013      	ands	r3, r2
 8000a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a16:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <__NVIC_SetPriorityGrouping+0x44>)
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	60d3      	str	r3, [r2, #12]
}
 8000a1c:	bf00      	nop
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <__NVIC_GetPriorityGrouping+0x18>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	0a1b      	lsrs	r3, r3, #8
 8000a36:	f003 0307 	and.w	r3, r3, #7
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	db0b      	blt.n	8000a72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	f003 021f 	and.w	r2, r3, #31
 8000a60:	4906      	ldr	r1, [pc, #24]	; (8000a7c <__NVIC_EnableIRQ+0x34>)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	095b      	lsrs	r3, r3, #5
 8000a68:	2001      	movs	r0, #1
 8000a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	e000e100 	.word	0xe000e100

08000a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	db0a      	blt.n	8000aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	490c      	ldr	r1, [pc, #48]	; (8000acc <__NVIC_SetPriority+0x4c>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	0112      	lsls	r2, r2, #4
 8000aa0:	b2d2      	uxtb	r2, r2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa8:	e00a      	b.n	8000ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4908      	ldr	r1, [pc, #32]	; (8000ad0 <__NVIC_SetPriority+0x50>)
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	3b04      	subs	r3, #4
 8000ab8:	0112      	lsls	r2, r2, #4
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	440b      	add	r3, r1
 8000abe:	761a      	strb	r2, [r3, #24]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000e100 	.word	0xe000e100
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b089      	sub	sp, #36	; 0x24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	f1c3 0307 	rsb	r3, r3, #7
 8000aee:	2b04      	cmp	r3, #4
 8000af0:	bf28      	it	cs
 8000af2:	2304      	movcs	r3, #4
 8000af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3304      	adds	r3, #4
 8000afa:	2b06      	cmp	r3, #6
 8000afc:	d902      	bls.n	8000b04 <NVIC_EncodePriority+0x30>
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3b03      	subs	r3, #3
 8000b02:	e000      	b.n	8000b06 <NVIC_EncodePriority+0x32>
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43da      	mvns	r2, r3
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	401a      	ands	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	43d9      	mvns	r1, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	4313      	orrs	r3, r2
         );
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3724      	adds	r7, #36	; 0x24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b48:	d301      	bcc.n	8000b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00f      	b.n	8000b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <SysTick_Config+0x40>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b56:	210f      	movs	r1, #15
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f7ff ff90 	bl	8000a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <SysTick_Config+0x40>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b66:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <SysTick_Config+0x40>)
 8000b68:	2207      	movs	r2, #7
 8000b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	e000e010 	.word	0xe000e010

08000b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ff2d 	bl	80009e4 <__NVIC_SetPriorityGrouping>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b086      	sub	sp, #24
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
 8000b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba4:	f7ff ff42 	bl	8000a2c <__NVIC_GetPriorityGrouping>
 8000ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	68b9      	ldr	r1, [r7, #8]
 8000bae:	6978      	ldr	r0, [r7, #20]
 8000bb0:	f7ff ff90 	bl	8000ad4 <NVIC_EncodePriority>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff5f 	bl	8000a80 <__NVIC_SetPriority>
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff35 	bl	8000a48 <__NVIC_EnableIRQ>
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff ffa2 	bl	8000b38 <SysTick_Config>
 8000bf4:	4603      	mov	r3, r0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d005      	beq.n	8000c22 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2204      	movs	r2, #4
 8000c1a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	73fb      	strb	r3, [r7, #15]
 8000c20:	e0d6      	b.n	8000dd0 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f022 020e 	bic.w	r2, r2, #14
 8000c30:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f022 0201 	bic.w	r2, r2, #1
 8000c40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	4b64      	ldr	r3, [pc, #400]	; (8000ddc <HAL_DMA_Abort_IT+0x1dc>)
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d958      	bls.n	8000d00 <HAL_DMA_Abort_IT+0x100>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a63      	ldr	r2, [pc, #396]	; (8000de0 <HAL_DMA_Abort_IT+0x1e0>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d04f      	beq.n	8000cf8 <HAL_DMA_Abort_IT+0xf8>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a61      	ldr	r2, [pc, #388]	; (8000de4 <HAL_DMA_Abort_IT+0x1e4>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d048      	beq.n	8000cf4 <HAL_DMA_Abort_IT+0xf4>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a60      	ldr	r2, [pc, #384]	; (8000de8 <HAL_DMA_Abort_IT+0x1e8>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d040      	beq.n	8000cee <HAL_DMA_Abort_IT+0xee>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a5e      	ldr	r2, [pc, #376]	; (8000dec <HAL_DMA_Abort_IT+0x1ec>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d038      	beq.n	8000ce8 <HAL_DMA_Abort_IT+0xe8>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a5d      	ldr	r2, [pc, #372]	; (8000df0 <HAL_DMA_Abort_IT+0x1f0>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d030      	beq.n	8000ce2 <HAL_DMA_Abort_IT+0xe2>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a5b      	ldr	r2, [pc, #364]	; (8000df4 <HAL_DMA_Abort_IT+0x1f4>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d028      	beq.n	8000cdc <HAL_DMA_Abort_IT+0xdc>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a53      	ldr	r2, [pc, #332]	; (8000ddc <HAL_DMA_Abort_IT+0x1dc>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d020      	beq.n	8000cd6 <HAL_DMA_Abort_IT+0xd6>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a57      	ldr	r2, [pc, #348]	; (8000df8 <HAL_DMA_Abort_IT+0x1f8>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d019      	beq.n	8000cd2 <HAL_DMA_Abort_IT+0xd2>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a56      	ldr	r2, [pc, #344]	; (8000dfc <HAL_DMA_Abort_IT+0x1fc>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d012      	beq.n	8000cce <HAL_DMA_Abort_IT+0xce>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a54      	ldr	r2, [pc, #336]	; (8000e00 <HAL_DMA_Abort_IT+0x200>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d00a      	beq.n	8000cc8 <HAL_DMA_Abort_IT+0xc8>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a53      	ldr	r2, [pc, #332]	; (8000e04 <HAL_DMA_Abort_IT+0x204>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d102      	bne.n	8000cc2 <HAL_DMA_Abort_IT+0xc2>
 8000cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc0:	e01b      	b.n	8000cfa <HAL_DMA_Abort_IT+0xfa>
 8000cc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc6:	e018      	b.n	8000cfa <HAL_DMA_Abort_IT+0xfa>
 8000cc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ccc:	e015      	b.n	8000cfa <HAL_DMA_Abort_IT+0xfa>
 8000cce:	2310      	movs	r3, #16
 8000cd0:	e013      	b.n	8000cfa <HAL_DMA_Abort_IT+0xfa>
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e011      	b.n	8000cfa <HAL_DMA_Abort_IT+0xfa>
 8000cd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cda:	e00e      	b.n	8000cfa <HAL_DMA_Abort_IT+0xfa>
 8000cdc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ce0:	e00b      	b.n	8000cfa <HAL_DMA_Abort_IT+0xfa>
 8000ce2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ce6:	e008      	b.n	8000cfa <HAL_DMA_Abort_IT+0xfa>
 8000ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cec:	e005      	b.n	8000cfa <HAL_DMA_Abort_IT+0xfa>
 8000cee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf2:	e002      	b.n	8000cfa <HAL_DMA_Abort_IT+0xfa>
 8000cf4:	2310      	movs	r3, #16
 8000cf6:	e000      	b.n	8000cfa <HAL_DMA_Abort_IT+0xfa>
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	4a43      	ldr	r2, [pc, #268]	; (8000e08 <HAL_DMA_Abort_IT+0x208>)
 8000cfc:	6053      	str	r3, [r2, #4]
 8000cfe:	e057      	b.n	8000db0 <HAL_DMA_Abort_IT+0x1b0>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a36      	ldr	r2, [pc, #216]	; (8000de0 <HAL_DMA_Abort_IT+0x1e0>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d04f      	beq.n	8000daa <HAL_DMA_Abort_IT+0x1aa>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a35      	ldr	r2, [pc, #212]	; (8000de4 <HAL_DMA_Abort_IT+0x1e4>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d048      	beq.n	8000da6 <HAL_DMA_Abort_IT+0x1a6>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a33      	ldr	r2, [pc, #204]	; (8000de8 <HAL_DMA_Abort_IT+0x1e8>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d040      	beq.n	8000da0 <HAL_DMA_Abort_IT+0x1a0>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a32      	ldr	r2, [pc, #200]	; (8000dec <HAL_DMA_Abort_IT+0x1ec>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d038      	beq.n	8000d9a <HAL_DMA_Abort_IT+0x19a>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a30      	ldr	r2, [pc, #192]	; (8000df0 <HAL_DMA_Abort_IT+0x1f0>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d030      	beq.n	8000d94 <HAL_DMA_Abort_IT+0x194>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a2f      	ldr	r2, [pc, #188]	; (8000df4 <HAL_DMA_Abort_IT+0x1f4>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d028      	beq.n	8000d8e <HAL_DMA_Abort_IT+0x18e>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a26      	ldr	r2, [pc, #152]	; (8000ddc <HAL_DMA_Abort_IT+0x1dc>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d020      	beq.n	8000d88 <HAL_DMA_Abort_IT+0x188>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a2b      	ldr	r2, [pc, #172]	; (8000df8 <HAL_DMA_Abort_IT+0x1f8>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d019      	beq.n	8000d84 <HAL_DMA_Abort_IT+0x184>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a29      	ldr	r2, [pc, #164]	; (8000dfc <HAL_DMA_Abort_IT+0x1fc>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d012      	beq.n	8000d80 <HAL_DMA_Abort_IT+0x180>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a28      	ldr	r2, [pc, #160]	; (8000e00 <HAL_DMA_Abort_IT+0x200>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d00a      	beq.n	8000d7a <HAL_DMA_Abort_IT+0x17a>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a26      	ldr	r2, [pc, #152]	; (8000e04 <HAL_DMA_Abort_IT+0x204>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d102      	bne.n	8000d74 <HAL_DMA_Abort_IT+0x174>
 8000d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d72:	e01b      	b.n	8000dac <HAL_DMA_Abort_IT+0x1ac>
 8000d74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d78:	e018      	b.n	8000dac <HAL_DMA_Abort_IT+0x1ac>
 8000d7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d7e:	e015      	b.n	8000dac <HAL_DMA_Abort_IT+0x1ac>
 8000d80:	2310      	movs	r3, #16
 8000d82:	e013      	b.n	8000dac <HAL_DMA_Abort_IT+0x1ac>
 8000d84:	2301      	movs	r3, #1
 8000d86:	e011      	b.n	8000dac <HAL_DMA_Abort_IT+0x1ac>
 8000d88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d8c:	e00e      	b.n	8000dac <HAL_DMA_Abort_IT+0x1ac>
 8000d8e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d92:	e00b      	b.n	8000dac <HAL_DMA_Abort_IT+0x1ac>
 8000d94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d98:	e008      	b.n	8000dac <HAL_DMA_Abort_IT+0x1ac>
 8000d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d9e:	e005      	b.n	8000dac <HAL_DMA_Abort_IT+0x1ac>
 8000da0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000da4:	e002      	b.n	8000dac <HAL_DMA_Abort_IT+0x1ac>
 8000da6:	2310      	movs	r3, #16
 8000da8:	e000      	b.n	8000dac <HAL_DMA_Abort_IT+0x1ac>
 8000daa:	2301      	movs	r3, #1
 8000dac:	4a17      	ldr	r2, [pc, #92]	; (8000e0c <HAL_DMA_Abort_IT+0x20c>)
 8000dae:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2201      	movs	r2, #1
 8000db4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d003      	beq.n	8000dd0 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	4798      	blx	r3
    } 
  }
  return status;
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40020080 	.word	0x40020080
 8000de0:	40020008 	.word	0x40020008
 8000de4:	4002001c 	.word	0x4002001c
 8000de8:	40020030 	.word	0x40020030
 8000dec:	40020044 	.word	0x40020044
 8000df0:	40020058 	.word	0x40020058
 8000df4:	4002006c 	.word	0x4002006c
 8000df8:	40020408 	.word	0x40020408
 8000dfc:	4002041c 	.word	0x4002041c
 8000e00:	40020430 	.word	0x40020430
 8000e04:	40020444 	.word	0x40020444
 8000e08:	40020400 	.word	0x40020400
 8000e0c:	40020000 	.word	0x40020000

08000e10 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b08b      	sub	sp, #44	; 0x2c
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e3a:	e133      	b.n	80010a4 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	69fa      	ldr	r2, [r7, #28]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	f040 8122 	bne.w	800109e <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2b12      	cmp	r3, #18
 8000e60:	d034      	beq.n	8000ecc <HAL_GPIO_Init+0xa4>
 8000e62:	2b12      	cmp	r3, #18
 8000e64:	d80d      	bhi.n	8000e82 <HAL_GPIO_Init+0x5a>
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d02b      	beq.n	8000ec2 <HAL_GPIO_Init+0x9a>
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d804      	bhi.n	8000e78 <HAL_GPIO_Init+0x50>
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d031      	beq.n	8000ed6 <HAL_GPIO_Init+0xae>
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d01c      	beq.n	8000eb0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e76:	e048      	b.n	8000f0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e78:	2b03      	cmp	r3, #3
 8000e7a:	d043      	beq.n	8000f04 <HAL_GPIO_Init+0xdc>
 8000e7c:	2b11      	cmp	r3, #17
 8000e7e:	d01b      	beq.n	8000eb8 <HAL_GPIO_Init+0x90>
          break;
 8000e80:	e043      	b.n	8000f0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e82:	4a8f      	ldr	r2, [pc, #572]	; (80010c0 <HAL_GPIO_Init+0x298>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d026      	beq.n	8000ed6 <HAL_GPIO_Init+0xae>
 8000e88:	4a8d      	ldr	r2, [pc, #564]	; (80010c0 <HAL_GPIO_Init+0x298>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d806      	bhi.n	8000e9c <HAL_GPIO_Init+0x74>
 8000e8e:	4a8d      	ldr	r2, [pc, #564]	; (80010c4 <HAL_GPIO_Init+0x29c>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d020      	beq.n	8000ed6 <HAL_GPIO_Init+0xae>
 8000e94:	4a8c      	ldr	r2, [pc, #560]	; (80010c8 <HAL_GPIO_Init+0x2a0>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d01d      	beq.n	8000ed6 <HAL_GPIO_Init+0xae>
          break;
 8000e9a:	e036      	b.n	8000f0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e9c:	4a8b      	ldr	r2, [pc, #556]	; (80010cc <HAL_GPIO_Init+0x2a4>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d019      	beq.n	8000ed6 <HAL_GPIO_Init+0xae>
 8000ea2:	4a8b      	ldr	r2, [pc, #556]	; (80010d0 <HAL_GPIO_Init+0x2a8>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d016      	beq.n	8000ed6 <HAL_GPIO_Init+0xae>
 8000ea8:	4a8a      	ldr	r2, [pc, #552]	; (80010d4 <HAL_GPIO_Init+0x2ac>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d013      	beq.n	8000ed6 <HAL_GPIO_Init+0xae>
          break;
 8000eae:	e02c      	b.n	8000f0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	623b      	str	r3, [r7, #32]
          break;
 8000eb6:	e028      	b.n	8000f0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	623b      	str	r3, [r7, #32]
          break;
 8000ec0:	e023      	b.n	8000f0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	3308      	adds	r3, #8
 8000ec8:	623b      	str	r3, [r7, #32]
          break;
 8000eca:	e01e      	b.n	8000f0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	330c      	adds	r3, #12
 8000ed2:	623b      	str	r3, [r7, #32]
          break;
 8000ed4:	e019      	b.n	8000f0a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d102      	bne.n	8000ee4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	623b      	str	r3, [r7, #32]
          break;
 8000ee2:	e012      	b.n	8000f0a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d105      	bne.n	8000ef8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000eec:	2308      	movs	r3, #8
 8000eee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69fa      	ldr	r2, [r7, #28]
 8000ef4:	611a      	str	r2, [r3, #16]
          break;
 8000ef6:	e008      	b.n	8000f0a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ef8:	2308      	movs	r3, #8
 8000efa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	69fa      	ldr	r2, [r7, #28]
 8000f00:	615a      	str	r2, [r3, #20]
          break;
 8000f02:	e002      	b.n	8000f0a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
          break;
 8000f08:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	2bff      	cmp	r3, #255	; 0xff
 8000f0e:	d801      	bhi.n	8000f14 <HAL_GPIO_Init+0xec>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	e001      	b.n	8000f18 <HAL_GPIO_Init+0xf0>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3304      	adds	r3, #4
 8000f18:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	2bff      	cmp	r3, #255	; 0xff
 8000f1e:	d802      	bhi.n	8000f26 <HAL_GPIO_Init+0xfe>
 8000f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	e002      	b.n	8000f2c <HAL_GPIO_Init+0x104>
 8000f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f28:	3b08      	subs	r3, #8
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	210f      	movs	r1, #15
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	6a39      	ldr	r1, [r7, #32]
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	fa01 f303 	lsl.w	r3, r1, r3
 8000f46:	431a      	orrs	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 80a2 	beq.w	800109e <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f5a:	4b5f      	ldr	r3, [pc, #380]	; (80010d8 <HAL_GPIO_Init+0x2b0>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	4a5e      	ldr	r2, [pc, #376]	; (80010d8 <HAL_GPIO_Init+0x2b0>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6193      	str	r3, [r2, #24]
 8000f66:	4b5c      	ldr	r3, [pc, #368]	; (80010d8 <HAL_GPIO_Init+0x2b0>)
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f72:	4a5a      	ldr	r2, [pc, #360]	; (80010dc <HAL_GPIO_Init+0x2b4>)
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f76:	089b      	lsrs	r3, r3, #2
 8000f78:	3302      	adds	r3, #2
 8000f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	220f      	movs	r2, #15
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	4013      	ands	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a51      	ldr	r2, [pc, #324]	; (80010e0 <HAL_GPIO_Init+0x2b8>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d01f      	beq.n	8000fde <HAL_GPIO_Init+0x1b6>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a50      	ldr	r2, [pc, #320]	; (80010e4 <HAL_GPIO_Init+0x2bc>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d019      	beq.n	8000fda <HAL_GPIO_Init+0x1b2>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4f      	ldr	r2, [pc, #316]	; (80010e8 <HAL_GPIO_Init+0x2c0>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d013      	beq.n	8000fd6 <HAL_GPIO_Init+0x1ae>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4e      	ldr	r2, [pc, #312]	; (80010ec <HAL_GPIO_Init+0x2c4>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d00d      	beq.n	8000fd2 <HAL_GPIO_Init+0x1aa>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a4d      	ldr	r2, [pc, #308]	; (80010f0 <HAL_GPIO_Init+0x2c8>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d007      	beq.n	8000fce <HAL_GPIO_Init+0x1a6>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4c      	ldr	r2, [pc, #304]	; (80010f4 <HAL_GPIO_Init+0x2cc>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d101      	bne.n	8000fca <HAL_GPIO_Init+0x1a2>
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	e00a      	b.n	8000fe0 <HAL_GPIO_Init+0x1b8>
 8000fca:	2306      	movs	r3, #6
 8000fcc:	e008      	b.n	8000fe0 <HAL_GPIO_Init+0x1b8>
 8000fce:	2304      	movs	r3, #4
 8000fd0:	e006      	b.n	8000fe0 <HAL_GPIO_Init+0x1b8>
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e004      	b.n	8000fe0 <HAL_GPIO_Init+0x1b8>
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	e002      	b.n	8000fe0 <HAL_GPIO_Init+0x1b8>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <HAL_GPIO_Init+0x1b8>
 8000fde:	2300      	movs	r3, #0
 8000fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fe2:	f002 0203 	and.w	r2, r2, #3
 8000fe6:	0092      	lsls	r2, r2, #2
 8000fe8:	4093      	lsls	r3, r2
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ff0:	493a      	ldr	r1, [pc, #232]	; (80010dc <HAL_GPIO_Init+0x2b4>)
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	089b      	lsrs	r3, r3, #2
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d006      	beq.n	8001018 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800100a:	4b3b      	ldr	r3, [pc, #236]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	493a      	ldr	r1, [pc, #232]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	600b      	str	r3, [r1, #0]
 8001016:	e006      	b.n	8001026 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001018:	4b37      	ldr	r3, [pc, #220]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	43db      	mvns	r3, r3
 8001020:	4935      	ldr	r1, [pc, #212]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001022:	4013      	ands	r3, r2
 8001024:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d006      	beq.n	8001040 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001032:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	4930      	ldr	r1, [pc, #192]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	604b      	str	r3, [r1, #4]
 800103e:	e006      	b.n	800104e <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001040:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	43db      	mvns	r3, r3
 8001048:	492b      	ldr	r1, [pc, #172]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 800104a:	4013      	ands	r3, r2
 800104c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d006      	beq.n	8001068 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800105a:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	4926      	ldr	r1, [pc, #152]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	608b      	str	r3, [r1, #8]
 8001066:	e006      	b.n	8001076 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001068:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	43db      	mvns	r3, r3
 8001070:	4921      	ldr	r1, [pc, #132]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001072:	4013      	ands	r3, r2
 8001074:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d006      	beq.n	8001090 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001082:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001084:	68da      	ldr	r2, [r3, #12]
 8001086:	491c      	ldr	r1, [pc, #112]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	60cb      	str	r3, [r1, #12]
 800108e:	e006      	b.n	800109e <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001090:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8001092:	68da      	ldr	r2, [r3, #12]
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	43db      	mvns	r3, r3
 8001098:	4917      	ldr	r1, [pc, #92]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 800109a:	4013      	ands	r3, r2
 800109c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	3301      	adds	r3, #1
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	fa22 f303 	lsr.w	r3, r2, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f47f aec4 	bne.w	8000e3c <HAL_GPIO_Init+0x14>
  }
}
 80010b4:	bf00      	nop
 80010b6:	372c      	adds	r7, #44	; 0x2c
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	10210000 	.word	0x10210000
 80010c4:	10110000 	.word	0x10110000
 80010c8:	10120000 	.word	0x10120000
 80010cc:	10310000 	.word	0x10310000
 80010d0:	10320000 	.word	0x10320000
 80010d4:	10220000 	.word	0x10220000
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40010000 	.word	0x40010000
 80010e0:	40010800 	.word	0x40010800
 80010e4:	40010c00 	.word	0x40010c00
 80010e8:	40011000 	.word	0x40011000
 80010ec:	40011400 	.word	0x40011400
 80010f0:	40011800 	.word	0x40011800
 80010f4:	40011c00 	.word	0x40011c00
 80010f8:	40010400 	.word	0x40010400

080010fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
 8001108:	4613      	mov	r3, r2
 800110a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001118:	e003      	b.n	8001122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	041a      	lsls	r2, r3, #16
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	611a      	str	r2, [r3, #16]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e11f      	b.n	800137e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d106      	bne.n	8001158 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff fa6a 	bl	800062c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2224      	movs	r2, #36	; 0x24
 800115c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0201 	bic.w	r2, r2, #1
 800116e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800117e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800118e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001190:	f002 fca8 	bl	8003ae4 <HAL_RCC_GetPCLK1Freq>
 8001194:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	4a7b      	ldr	r2, [pc, #492]	; (8001388 <HAL_I2C_Init+0x25c>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d807      	bhi.n	80011b0 <HAL_I2C_Init+0x84>
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4a7a      	ldr	r2, [pc, #488]	; (800138c <HAL_I2C_Init+0x260>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	bf94      	ite	ls
 80011a8:	2301      	movls	r3, #1
 80011aa:	2300      	movhi	r3, #0
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	e006      	b.n	80011be <HAL_I2C_Init+0x92>
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4a77      	ldr	r2, [pc, #476]	; (8001390 <HAL_I2C_Init+0x264>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	bf94      	ite	ls
 80011b8:	2301      	movls	r3, #1
 80011ba:	2300      	movhi	r3, #0
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e0db      	b.n	800137e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4a72      	ldr	r2, [pc, #456]	; (8001394 <HAL_I2C_Init+0x268>)
 80011ca:	fba2 2303 	umull	r2, r3, r2, r3
 80011ce:	0c9b      	lsrs	r3, r3, #18
 80011d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	68ba      	ldr	r2, [r7, #8]
 80011e2:	430a      	orrs	r2, r1
 80011e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	4a64      	ldr	r2, [pc, #400]	; (8001388 <HAL_I2C_Init+0x25c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d802      	bhi.n	8001200 <HAL_I2C_Init+0xd4>
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	3301      	adds	r3, #1
 80011fe:	e009      	b.n	8001214 <HAL_I2C_Init+0xe8>
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001206:	fb02 f303 	mul.w	r3, r2, r3
 800120a:	4a63      	ldr	r2, [pc, #396]	; (8001398 <HAL_I2C_Init+0x26c>)
 800120c:	fba2 2303 	umull	r2, r3, r2, r3
 8001210:	099b      	lsrs	r3, r3, #6
 8001212:	3301      	adds	r3, #1
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	6812      	ldr	r2, [r2, #0]
 8001218:	430b      	orrs	r3, r1
 800121a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001226:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	4956      	ldr	r1, [pc, #344]	; (8001388 <HAL_I2C_Init+0x25c>)
 8001230:	428b      	cmp	r3, r1
 8001232:	d80d      	bhi.n	8001250 <HAL_I2C_Init+0x124>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	1e59      	subs	r1, r3, #1
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001242:	3301      	adds	r3, #1
 8001244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001248:	2b04      	cmp	r3, #4
 800124a:	bf38      	it	cc
 800124c:	2304      	movcc	r3, #4
 800124e:	e04f      	b.n	80012f0 <HAL_I2C_Init+0x1c4>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d111      	bne.n	800127c <HAL_I2C_Init+0x150>
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	1e58      	subs	r0, r3, #1
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6859      	ldr	r1, [r3, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	440b      	add	r3, r1
 8001266:	fbb0 f3f3 	udiv	r3, r0, r3
 800126a:	3301      	adds	r3, #1
 800126c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001270:	2b00      	cmp	r3, #0
 8001272:	bf0c      	ite	eq
 8001274:	2301      	moveq	r3, #1
 8001276:	2300      	movne	r3, #0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	e012      	b.n	80012a2 <HAL_I2C_Init+0x176>
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	1e58      	subs	r0, r3, #1
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6859      	ldr	r1, [r3, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	0099      	lsls	r1, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001292:	3301      	adds	r3, #1
 8001294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001298:	2b00      	cmp	r3, #0
 800129a:	bf0c      	ite	eq
 800129c:	2301      	moveq	r3, #1
 800129e:	2300      	movne	r3, #0
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_I2C_Init+0x17e>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e022      	b.n	80012f0 <HAL_I2C_Init+0x1c4>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10e      	bne.n	80012d0 <HAL_I2C_Init+0x1a4>
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	1e58      	subs	r0, r3, #1
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6859      	ldr	r1, [r3, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	440b      	add	r3, r1
 80012c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80012c4:	3301      	adds	r3, #1
 80012c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ce:	e00f      	b.n	80012f0 <HAL_I2C_Init+0x1c4>
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	1e58      	subs	r0, r3, #1
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6859      	ldr	r1, [r3, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	0099      	lsls	r1, r3, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012e6:	3301      	adds	r3, #1
 80012e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	6809      	ldr	r1, [r1, #0]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69da      	ldr	r2, [r3, #28]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	431a      	orrs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	430a      	orrs	r2, r1
 8001312:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800131e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6911      	ldr	r1, [r2, #16]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	68d2      	ldr	r2, [r2, #12]
 800132a:	4311      	orrs	r1, r2
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	6812      	ldr	r2, [r2, #0]
 8001330:	430b      	orrs	r3, r1
 8001332:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	695a      	ldr	r2, [r3, #20]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	431a      	orrs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	430a      	orrs	r2, r1
 800134e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f042 0201 	orr.w	r2, r2, #1
 800135e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2220      	movs	r2, #32
 800136a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	000186a0 	.word	0x000186a0
 800138c:	001e847f 	.word	0x001e847f
 8001390:	003d08ff 	.word	0x003d08ff
 8001394:	431bde83 	.word	0x431bde83
 8001398:	10624dd3 	.word	0x10624dd3

0800139c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	4608      	mov	r0, r1
 80013a6:	4611      	mov	r1, r2
 80013a8:	461a      	mov	r2, r3
 80013aa:	4603      	mov	r3, r0
 80013ac:	817b      	strh	r3, [r7, #10]
 80013ae:	460b      	mov	r3, r1
 80013b0:	813b      	strh	r3, [r7, #8]
 80013b2:	4613      	mov	r3, r2
 80013b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013b6:	f7ff fae9 	bl	800098c <HAL_GetTick>
 80013ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b20      	cmp	r3, #32
 80013c6:	f040 80d9 	bne.w	800157c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2319      	movs	r3, #25
 80013d0:	2201      	movs	r2, #1
 80013d2:	496d      	ldr	r1, [pc, #436]	; (8001588 <HAL_I2C_Mem_Write+0x1ec>)
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	f001 fddd 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80013e0:	2302      	movs	r3, #2
 80013e2:	e0cc      	b.n	800157e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d101      	bne.n	80013f2 <HAL_I2C_Mem_Write+0x56>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e0c5      	b.n	800157e <HAL_I2C_Mem_Write+0x1e2>
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	2b01      	cmp	r3, #1
 8001406:	d007      	beq.n	8001418 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 0201 	orr.w	r2, r2, #1
 8001416:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001426:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2221      	movs	r2, #33	; 0x21
 800142c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2240      	movs	r2, #64	; 0x40
 8001434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2200      	movs	r2, #0
 800143c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6a3a      	ldr	r2, [r7, #32]
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001448:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800144e:	b29a      	uxth	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4a4d      	ldr	r2, [pc, #308]	; (800158c <HAL_I2C_Mem_Write+0x1f0>)
 8001458:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800145a:	88f8      	ldrh	r0, [r7, #6]
 800145c:	893a      	ldrh	r2, [r7, #8]
 800145e:	8979      	ldrh	r1, [r7, #10]
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	4603      	mov	r3, r0
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f001 fc54 	bl	8002d18 <I2C_RequestMemoryWrite>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d052      	beq.n	800151c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e081      	b.n	800157e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f001 fe5e 	bl	8003140 <I2C_WaitOnTXEFlagUntilTimeout>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00d      	beq.n	80014a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	2b04      	cmp	r3, #4
 8001490:	d107      	bne.n	80014a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e06b      	b.n	800157e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	781a      	ldrb	r2, [r3, #0]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	1c5a      	adds	r2, r3, #1
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014c0:	3b01      	subs	r3, #1
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	3b01      	subs	r3, #1
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	d11b      	bne.n	800151c <HAL_I2C_Mem_Write+0x180>
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d017      	beq.n	800151c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f0:	781a      	ldrb	r2, [r3, #0]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001506:	3b01      	subs	r3, #1
 8001508:	b29a      	uxth	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001512:	b29b      	uxth	r3, r3
 8001514:	3b01      	subs	r3, #1
 8001516:	b29a      	uxth	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1aa      	bne.n	800147a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f001 fe4a 	bl	80031c2 <I2C_WaitOnBTFFlagUntilTimeout>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00d      	beq.n	8001550 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	2b04      	cmp	r3, #4
 800153a:	d107      	bne.n	800154c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800154a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e016      	b.n	800157e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800155e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2220      	movs	r2, #32
 8001564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001578:	2300      	movs	r3, #0
 800157a:	e000      	b.n	800157e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800157c:	2302      	movs	r3, #2
  }
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	00100002 	.word	0x00100002
 800158c:	ffff0000 	.word	0xffff0000

08001590 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001598:	2300      	movs	r3, #0
 800159a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80015b0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015b8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	2b10      	cmp	r3, #16
 80015be:	d003      	beq.n	80015c8 <HAL_I2C_EV_IRQHandler+0x38>
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	2b40      	cmp	r3, #64	; 0x40
 80015c4:	f040 80bd 	bne.w	8001742 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10d      	bne.n	80015fe <HAL_I2C_EV_IRQHandler+0x6e>
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80015e8:	d003      	beq.n	80015f2 <HAL_I2C_EV_IRQHandler+0x62>
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80015f0:	d101      	bne.n	80015f6 <HAL_I2C_EV_IRQHandler+0x66>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <HAL_I2C_EV_IRQHandler+0x68>
 80015f6:	2300      	movs	r3, #0
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	f000 812e 	beq.w	800185a <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00c      	beq.n	8001622 <HAL_I2C_EV_IRQHandler+0x92>
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	0a5b      	lsrs	r3, r3, #9
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b00      	cmp	r3, #0
 8001612:	d006      	beq.n	8001622 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f001 fe75 	bl	8003304 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 fd60 	bl	80020e0 <I2C_Master_SB>
 8001620:	e08e      	b.n	8001740 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	08db      	lsrs	r3, r3, #3
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d009      	beq.n	8001642 <HAL_I2C_EV_IRQHandler+0xb2>
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	0a5b      	lsrs	r3, r3, #9
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 fdd5 	bl	80021ea <I2C_Master_ADD10>
 8001640:	e07e      	b.n	8001740 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	085b      	lsrs	r3, r3, #1
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	d009      	beq.n	8001662 <HAL_I2C_EV_IRQHandler+0xd2>
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	0a5b      	lsrs	r3, r3, #9
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 fdee 	bl	800223c <I2C_Master_ADDR>
 8001660:	e06e      	b.n	8001740 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	089b      	lsrs	r3, r3, #2
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d037      	beq.n	80016de <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800167c:	f000 80ef 	beq.w	800185e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	09db      	lsrs	r3, r3, #7
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00f      	beq.n	80016ac <HAL_I2C_EV_IRQHandler+0x11c>
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	0a9b      	lsrs	r3, r3, #10
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b00      	cmp	r3, #0
 8001696:	d009      	beq.n	80016ac <HAL_I2C_EV_IRQHandler+0x11c>
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	089b      	lsrs	r3, r3, #2
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d103      	bne.n	80016ac <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f9ed 	bl	8001a84 <I2C_MasterTransmit_TXE>
 80016aa:	e049      	b.n	8001740 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 80d2 	beq.w	800185e <HAL_I2C_EV_IRQHandler+0x2ce>
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	0a5b      	lsrs	r3, r3, #9
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 80cb 	beq.w	800185e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	2b10      	cmp	r3, #16
 80016cc:	d103      	bne.n	80016d6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 fa74 	bl	8001bbc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016d4:	e0c3      	b.n	800185e <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 fad8 	bl	8001c8c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016dc:	e0bf      	b.n	800185e <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016ec:	f000 80b7 	beq.w	800185e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	099b      	lsrs	r3, r3, #6
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00f      	beq.n	800171c <HAL_I2C_EV_IRQHandler+0x18c>
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	0a9b      	lsrs	r3, r3, #10
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b00      	cmp	r3, #0
 8001706:	d009      	beq.n	800171c <HAL_I2C_EV_IRQHandler+0x18c>
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	089b      	lsrs	r3, r3, #2
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d103      	bne.n	800171c <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 fb48 	bl	8001daa <I2C_MasterReceive_RXNE>
 800171a:	e011      	b.n	8001740 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 809a 	beq.w	800185e <HAL_I2C_EV_IRQHandler+0x2ce>
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	0a5b      	lsrs	r3, r3, #9
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 8093 	beq.w	800185e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 fbe7 	bl	8001f0c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800173e:	e08e      	b.n	800185e <HAL_I2C_EV_IRQHandler+0x2ce>
 8001740:	e08d      	b.n	800185e <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	2b00      	cmp	r3, #0
 8001748:	d004      	beq.n	8001754 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	61fb      	str	r3, [r7, #28]
 8001752:	e007      	b.n	8001764 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	085b      	lsrs	r3, r3, #1
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	d012      	beq.n	8001796 <HAL_I2C_EV_IRQHandler+0x206>
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	0a5b      	lsrs	r3, r3, #9
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00c      	beq.n	8001796 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800178c:	69b9      	ldr	r1, [r7, #24]
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 ffab 	bl	80026ea <I2C_Slave_ADDR>
 8001794:	e066      	b.n	8001864 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d009      	beq.n	80017b6 <HAL_I2C_EV_IRQHandler+0x226>
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	0a5b      	lsrs	r3, r3, #9
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 ffe0 	bl	8002774 <I2C_Slave_STOPF>
 80017b4:	e056      	b.n	8001864 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80017b6:	7bbb      	ldrb	r3, [r7, #14]
 80017b8:	2b21      	cmp	r3, #33	; 0x21
 80017ba:	d002      	beq.n	80017c2 <HAL_I2C_EV_IRQHandler+0x232>
 80017bc:	7bbb      	ldrb	r3, [r7, #14]
 80017be:	2b29      	cmp	r3, #41	; 0x29
 80017c0:	d125      	bne.n	800180e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	09db      	lsrs	r3, r3, #7
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00f      	beq.n	80017ee <HAL_I2C_EV_IRQHandler+0x25e>
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	0a9b      	lsrs	r3, r3, #10
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d009      	beq.n	80017ee <HAL_I2C_EV_IRQHandler+0x25e>
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	089b      	lsrs	r3, r3, #2
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d103      	bne.n	80017ee <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 fec3 	bl	8002572 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017ec:	e039      	b.n	8001862 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	089b      	lsrs	r3, r3, #2
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d033      	beq.n	8001862 <HAL_I2C_EV_IRQHandler+0x2d2>
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	0a5b      	lsrs	r3, r3, #9
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d02d      	beq.n	8001862 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 fef0 	bl	80025ec <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800180c:	e029      	b.n	8001862 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	099b      	lsrs	r3, r3, #6
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00f      	beq.n	800183a <HAL_I2C_EV_IRQHandler+0x2aa>
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	0a9b      	lsrs	r3, r3, #10
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d009      	beq.n	800183a <HAL_I2C_EV_IRQHandler+0x2aa>
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	089b      	lsrs	r3, r3, #2
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d103      	bne.n	800183a <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 fefa 	bl	800262c <I2C_SlaveReceive_RXNE>
 8001838:	e014      	b.n	8001864 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	089b      	lsrs	r3, r3, #2
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00e      	beq.n	8001864 <HAL_I2C_EV_IRQHandler+0x2d4>
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	0a5b      	lsrs	r3, r3, #9
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d008      	beq.n	8001864 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 ff28 	bl	80026a8 <I2C_SlaveReceive_BTF>
 8001858:	e004      	b.n	8001864 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800185a:	bf00      	nop
 800185c:	e002      	b.n	8001864 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800185e:	bf00      	nop
 8001860:	e000      	b.n	8001864 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001862:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001864:	3720      	adds	r7, #32
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b08a      	sub	sp, #40	; 0x28
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800188c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d016      	beq.n	80018c8 <HAL_I2C_ER_IRQHandler+0x5e>
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d010      	beq.n	80018c8 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80018b6:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018c6:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	0a5b      	lsrs	r3, r3, #9
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00e      	beq.n	80018f2 <HAL_I2C_ER_IRQHandler+0x88>
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	0a1b      	lsrs	r3, r3, #8
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d008      	beq.n	80018f2 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	f043 0302 	orr.w	r3, r3, #2
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80018f0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	0a9b      	lsrs	r3, r3, #10
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d03f      	beq.n	800197e <HAL_I2C_ER_IRQHandler+0x114>
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d039      	beq.n	800197e <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 800190a:	7efb      	ldrb	r3, [r7, #27]
 800190c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001912:	b29b      	uxth	r3, r3
 8001914:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800191c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001924:	7ebb      	ldrb	r3, [r7, #26]
 8001926:	2b20      	cmp	r3, #32
 8001928:	d112      	bne.n	8001950 <HAL_I2C_ER_IRQHandler+0xe6>
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10f      	bne.n	8001950 <HAL_I2C_ER_IRQHandler+0xe6>
 8001930:	7cfb      	ldrb	r3, [r7, #19]
 8001932:	2b21      	cmp	r3, #33	; 0x21
 8001934:	d008      	beq.n	8001948 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001936:	7cfb      	ldrb	r3, [r7, #19]
 8001938:	2b29      	cmp	r3, #41	; 0x29
 800193a:	d005      	beq.n	8001948 <HAL_I2C_ER_IRQHandler+0xde>
 800193c:	7cfb      	ldrb	r3, [r7, #19]
 800193e:	2b28      	cmp	r3, #40	; 0x28
 8001940:	d106      	bne.n	8001950 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2b21      	cmp	r3, #33	; 0x21
 8001946:	d103      	bne.n	8001950 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f001 f843 	bl	80029d4 <I2C_Slave_AF>
 800194e:	e016      	b.n	800197e <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001958:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001962:	7efb      	ldrb	r3, [r7, #27]
 8001964:	2b10      	cmp	r3, #16
 8001966:	d002      	beq.n	800196e <HAL_I2C_ER_IRQHandler+0x104>
 8001968:	7efb      	ldrb	r3, [r7, #27]
 800196a:	2b40      	cmp	r3, #64	; 0x40
 800196c:	d107      	bne.n	800197e <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800197c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	0adb      	lsrs	r3, r3, #11
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00e      	beq.n	80019a8 <HAL_I2C_ER_IRQHandler+0x13e>
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	d008      	beq.n	80019a8 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	f043 0308 	orr.w	r3, r3, #8
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80019a6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d008      	beq.n	80019c0 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f001 f87a 	bl	8002ab4 <I2C_ITError>
  }
}
 80019c0:	bf00      	nop
 80019c2:	3728      	adds	r7, #40	; 0x28
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr

080019da <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr

080019ec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr

080019fe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	70fb      	strb	r3, [r7, #3]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr

08001a2a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr

08001a4e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr

08001a60 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr

08001a72 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a92:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a9a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d150      	bne.n	8001b4c <I2C_MasterTransmit_TXE+0xc8>
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	2b21      	cmp	r3, #33	; 0x21
 8001aae:	d14d      	bne.n	8001b4c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d01d      	beq.n	8001af2 <I2C_MasterTransmit_TXE+0x6e>
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	2b20      	cmp	r3, #32
 8001aba:	d01a      	beq.n	8001af2 <I2C_MasterTransmit_TXE+0x6e>
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ac2:	d016      	beq.n	8001af2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ad2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2211      	movs	r2, #17
 8001ad8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ff6c 	bl	80019c8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001af0:	e060      	b.n	8001bb4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b00:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b10:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b40      	cmp	r3, #64	; 0x40
 8001b2a:	d107      	bne.n	8001b3c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ff81 	bl	8001a3c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b3a:	e03b      	b.n	8001bb4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff ff3f 	bl	80019c8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b4a:	e033      	b.n	8001bb4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	2b21      	cmp	r3, #33	; 0x21
 8001b50:	d005      	beq.n	8001b5e <I2C_MasterTransmit_TXE+0xda>
 8001b52:	7bbb      	ldrb	r3, [r7, #14]
 8001b54:	2b40      	cmp	r3, #64	; 0x40
 8001b56:	d12d      	bne.n	8001bb4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	2b22      	cmp	r3, #34	; 0x22
 8001b5c:	d12a      	bne.n	8001bb4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d108      	bne.n	8001b7a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b76:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001b78:	e01c      	b.n	8001bb4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b40      	cmp	r3, #64	; 0x40
 8001b84:	d103      	bne.n	8001b8e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f880 	bl	8001c8c <I2C_MemoryTransmit_TXE_BTF>
}
 8001b8c:	e012      	b.n	8001bb4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	781a      	ldrb	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001bb2:	e7ff      	b.n	8001bb4 <I2C_MasterTransmit_TXE+0x130>
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b21      	cmp	r3, #33	; 0x21
 8001bd4:	d156      	bne.n	8001c84 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d012      	beq.n	8001c06 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	781a      	ldrb	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001c04:	e03e      	b.n	8001c84 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d01d      	beq.n	8001c48 <I2C_MasterTransmit_BTF+0x8c>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b20      	cmp	r3, #32
 8001c10:	d01a      	beq.n	8001c48 <I2C_MasterTransmit_BTF+0x8c>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c18:	d016      	beq.n	8001c48 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c28:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2211      	movs	r2, #17
 8001c2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff fec1 	bl	80019c8 <HAL_I2C_MasterTxCpltCallback>
}
 8001c46:	e01d      	b.n	8001c84 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c56:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c66:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2220      	movs	r2, #32
 8001c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff fea2 	bl	80019c8 <HAL_I2C_MasterTxCpltCallback>
}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c9a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d11d      	bne.n	8001ce0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d10b      	bne.n	8001cc4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cbc:	1c9a      	adds	r2, r3, #2
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001cc2:	e06e      	b.n	8001da2 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	121b      	asrs	r3, r3, #8
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cd8:	1c5a      	adds	r2, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001cde:	e060      	b.n	8001da2 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d10b      	bne.n	8001d00 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001cfe:	e050      	b.n	8001da2 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d14c      	bne.n	8001da2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	2b22      	cmp	r3, #34	; 0x22
 8001d0c:	d108      	bne.n	8001d20 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d1c:	601a      	str	r2, [r3, #0]
}
 8001d1e:	e040      	b.n	8001da2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d015      	beq.n	8001d56 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	2b21      	cmp	r3, #33	; 0x21
 8001d2e:	d112      	bne.n	8001d56 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	781a      	ldrb	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001d54:	e025      	b.n	8001da2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d120      	bne.n	8001da2 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	2b21      	cmp	r3, #33	; 0x21
 8001d64:	d11d      	bne.n	8001da2 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d74:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d84:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2220      	movs	r2, #32
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff fe4d 	bl	8001a3c <HAL_I2C_MemTxCpltCallback>
}
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b084      	sub	sp, #16
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b22      	cmp	r3, #34	; 0x22
 8001dbc:	f040 80a2 	bne.w	8001f04 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d921      	bls.n	8001e12 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	f040 8082 	bne.w	8001f04 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e0e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001e10:	e078      	b.n	8001f04 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d074      	beq.n	8001f04 <I2C_MasterReceive_RXNE+0x15a>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d002      	beq.n	8001e26 <I2C_MasterReceive_RXNE+0x7c>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d16e      	bne.n	8001f04 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f001 fa0c 	bl	8003244 <I2C_WaitOnSTOPRequestThroughIT>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d142      	bne.n	8001eb8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e40:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e50:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b40      	cmp	r3, #64	; 0x40
 8001e8a:	d10a      	bne.n	8001ea2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff fdd7 	bl	8001a4e <HAL_I2C_MemRxCpltCallback>
}
 8001ea0:	e030      	b.n	8001f04 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2212      	movs	r2, #18
 8001eae:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff fd92 	bl	80019da <HAL_I2C_MasterRxCpltCallback>
}
 8001eb6:	e025      	b.n	8001f04 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ec6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691a      	ldr	r2, [r3, #16]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff fdae 	bl	8001a60 <HAL_I2C_ErrorCallback>
}
 8001f04:	bf00      	nop
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f18:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d11b      	bne.n	8001f5c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f32:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691a      	ldr	r2, [r3, #16]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	3b01      	subs	r3, #1
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001f5a:	e0bd      	b.n	80020d8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d129      	bne.n	8001fba <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f74:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d00a      	beq.n	8001f92 <I2C_MasterReceive_BTF+0x86>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d007      	beq.n	8001f92 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f90:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001fb8:	e08e      	b.n	80020d8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d176      	bne.n	80020b2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d002      	beq.n	8001fd0 <I2C_MasterReceive_BTF+0xc4>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2b10      	cmp	r3, #16
 8001fce:	d108      	bne.n	8001fe2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	e019      	b.n	8002016 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d002      	beq.n	8001fee <I2C_MasterReceive_BTF+0xe2>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d108      	bne.n	8002000 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	e00a      	b.n	8002016 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b10      	cmp	r3, #16
 8002004:	d007      	beq.n	8002016 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002014:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002032:	b29b      	uxth	r3, r3
 8002034:	3b01      	subs	r3, #1
 8002036:	b29a      	uxth	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691a      	ldr	r2, [r3, #16]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002058:	b29b      	uxth	r3, r3
 800205a:	3b01      	subs	r3, #1
 800205c:	b29a      	uxth	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002070:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2220      	movs	r2, #32
 8002076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b40      	cmp	r3, #64	; 0x40
 8002084:	d10a      	bne.n	800209c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff fcda 	bl	8001a4e <HAL_I2C_MemRxCpltCallback>
}
 800209a:	e01d      	b.n	80020d8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2212      	movs	r2, #18
 80020a8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff fc95 	bl	80019da <HAL_I2C_MasterRxCpltCallback>
}
 80020b0:	e012      	b.n	80020d8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80020d8:	bf00      	nop
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b40      	cmp	r3, #64	; 0x40
 80020f2:	d117      	bne.n	8002124 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d109      	bne.n	8002110 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002100:	b2db      	uxtb	r3, r3
 8002102:	461a      	mov	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800210c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800210e:	e067      	b.n	80021e0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002114:	b2db      	uxtb	r3, r3
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	b2da      	uxtb	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	611a      	str	r2, [r3, #16]
}
 8002122:	e05d      	b.n	80021e0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800212c:	d133      	bne.n	8002196 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b21      	cmp	r3, #33	; 0x21
 8002138:	d109      	bne.n	800214e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	b2db      	uxtb	r3, r3
 8002140:	461a      	mov	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800214a:	611a      	str	r2, [r3, #16]
 800214c:	e008      	b.n	8002160 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	b2da      	uxtb	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002164:	2b00      	cmp	r3, #0
 8002166:	d004      	beq.n	8002172 <I2C_Master_SB+0x92>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216e:	2b00      	cmp	r3, #0
 8002170:	d108      	bne.n	8002184 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002176:	2b00      	cmp	r3, #0
 8002178:	d032      	beq.n	80021e0 <I2C_Master_SB+0x100>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002180:	2b00      	cmp	r3, #0
 8002182:	d02d      	beq.n	80021e0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002192:	605a      	str	r2, [r3, #4]
}
 8002194:	e024      	b.n	80021e0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10e      	bne.n	80021bc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	11db      	asrs	r3, r3, #7
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	f003 0306 	and.w	r3, r3, #6
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	f063 030f 	orn	r3, r3, #15
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	611a      	str	r2, [r3, #16]
}
 80021ba:	e011      	b.n	80021e0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d10d      	bne.n	80021e0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	11db      	asrs	r3, r3, #7
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	f003 0306 	and.w	r3, r3, #6
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	f063 030e 	orn	r3, r3, #14
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	611a      	str	r2, [r3, #16]
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002202:	2b00      	cmp	r3, #0
 8002204:	d103      	bne.n	800220e <I2C_Master_ADD10+0x24>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220a:	2b00      	cmp	r3, #0
 800220c:	d011      	beq.n	8002232 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	2b00      	cmp	r3, #0
 8002216:	d104      	bne.n	8002222 <I2C_Master_ADD10+0x38>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221e:	2b00      	cmp	r3, #0
 8002220:	d007      	beq.n	8002232 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002230:	605a      	str	r2, [r3, #4]
    }
  }
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr

0800223c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800223c:	b480      	push	{r7}
 800223e:	b091      	sub	sp, #68	; 0x44
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800224a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002252:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b22      	cmp	r3, #34	; 0x22
 8002264:	f040 8174 	bne.w	8002550 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10f      	bne.n	8002290 <I2C_Master_ADDR+0x54>
 8002270:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002274:	2b40      	cmp	r3, #64	; 0x40
 8002276:	d10b      	bne.n	8002290 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002278:	2300      	movs	r3, #0
 800227a:	633b      	str	r3, [r7, #48]	; 0x30
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	633b      	str	r3, [r7, #48]	; 0x30
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	633b      	str	r3, [r7, #48]	; 0x30
 800228c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228e:	e16b      	b.n	8002568 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002294:	2b00      	cmp	r3, #0
 8002296:	d11d      	bne.n	80022d4 <I2C_Master_ADDR+0x98>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80022a0:	d118      	bne.n	80022d4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022a2:	2300      	movs	r3, #0
 80022a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022c6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	651a      	str	r2, [r3, #80]	; 0x50
 80022d2:	e149      	b.n	8002568 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d113      	bne.n	8002306 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022de:	2300      	movs	r3, #0
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80022f2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	e120      	b.n	8002548 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230a:	b29b      	uxth	r3, r3
 800230c:	2b01      	cmp	r3, #1
 800230e:	f040 808a 	bne.w	8002426 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002314:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002318:	d137      	bne.n	800238a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002328:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002338:	d113      	bne.n	8002362 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002348:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	e0f2      	b.n	8002548 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002362:	2300      	movs	r3, #0
 8002364:	623b      	str	r3, [r7, #32]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	623b      	str	r3, [r7, #32]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	623b      	str	r3, [r7, #32]
 8002376:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	e0de      	b.n	8002548 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800238a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800238c:	2b08      	cmp	r3, #8
 800238e:	d02e      	beq.n	80023ee <I2C_Master_ADDR+0x1b2>
 8002390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002392:	2b20      	cmp	r3, #32
 8002394:	d02b      	beq.n	80023ee <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002398:	2b12      	cmp	r3, #18
 800239a:	d102      	bne.n	80023a2 <I2C_Master_ADDR+0x166>
 800239c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d125      	bne.n	80023ee <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80023a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d00e      	beq.n	80023c6 <I2C_Master_ADDR+0x18a>
 80023a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d00b      	beq.n	80023c6 <I2C_Master_ADDR+0x18a>
 80023ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b0:	2b10      	cmp	r3, #16
 80023b2:	d008      	beq.n	80023c6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	e007      	b.n	80023d6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023d4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	61fb      	str	r3, [r7, #28]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	61fb      	str	r3, [r7, #28]
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	e0ac      	b.n	8002548 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023fc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fe:	2300      	movs	r3, #0
 8002400:	61bb      	str	r3, [r7, #24]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	61bb      	str	r3, [r7, #24]
 8002412:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	e090      	b.n	8002548 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242a:	b29b      	uxth	r3, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d158      	bne.n	80024e2 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002432:	2b04      	cmp	r3, #4
 8002434:	d021      	beq.n	800247a <I2C_Master_ADDR+0x23e>
 8002436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002438:	2b02      	cmp	r3, #2
 800243a:	d01e      	beq.n	800247a <I2C_Master_ADDR+0x23e>
 800243c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243e:	2b10      	cmp	r3, #16
 8002440:	d01b      	beq.n	800247a <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002450:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	e012      	b.n	80024a0 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002488:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024ae:	d14b      	bne.n	8002548 <I2C_Master_ADDR+0x30c>
 80024b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024b6:	d00b      	beq.n	80024d0 <I2C_Master_ADDR+0x294>
 80024b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d008      	beq.n	80024d0 <I2C_Master_ADDR+0x294>
 80024be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d005      	beq.n	80024d0 <I2C_Master_ADDR+0x294>
 80024c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c6:	2b10      	cmp	r3, #16
 80024c8:	d002      	beq.n	80024d0 <I2C_Master_ADDR+0x294>
 80024ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024cc:	2b20      	cmp	r3, #32
 80024ce:	d13b      	bne.n	8002548 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	e032      	b.n	8002548 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024f0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002500:	d117      	bne.n	8002532 <I2C_Master_ADDR+0x2f6>
 8002502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002504:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002508:	d00b      	beq.n	8002522 <I2C_Master_ADDR+0x2e6>
 800250a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800250c:	2b01      	cmp	r3, #1
 800250e:	d008      	beq.n	8002522 <I2C_Master_ADDR+0x2e6>
 8002510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002512:	2b08      	cmp	r3, #8
 8002514:	d005      	beq.n	8002522 <I2C_Master_ADDR+0x2e6>
 8002516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002518:	2b10      	cmp	r3, #16
 800251a:	d002      	beq.n	8002522 <I2C_Master_ADDR+0x2e6>
 800251c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800251e:	2b20      	cmp	r3, #32
 8002520:	d107      	bne.n	8002532 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002530:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800254e:	e00b      	b.n	8002568 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002550:	2300      	movs	r3, #0
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	60bb      	str	r3, [r7, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
}
 8002566:	e7ff      	b.n	8002568 <I2C_Master_ADDR+0x32c>
 8002568:	bf00      	nop
 800256a:	3744      	adds	r7, #68	; 0x44
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b084      	sub	sp, #16
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002580:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d02b      	beq.n	80025e4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	781a      	ldrb	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d114      	bne.n	80025e4 <I2C_SlaveTransmit_TXE+0x72>
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	2b29      	cmp	r3, #41	; 0x29
 80025be:	d111      	bne.n	80025e4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ce:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2221      	movs	r2, #33	; 0x21
 80025d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2228      	movs	r2, #40	; 0x28
 80025da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7ff fa04 	bl	80019ec <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80025e4:	bf00      	nop
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d011      	beq.n	8002622 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	781a      	ldrb	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002618:	b29b      	uxth	r3, r3
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002640:	b29b      	uxth	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d02c      	beq.n	80026a0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002662:	b29b      	uxth	r3, r3
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d114      	bne.n	80026a0 <I2C_SlaveReceive_RXNE+0x74>
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	2b2a      	cmp	r3, #42	; 0x2a
 800267a:	d111      	bne.n	80026a0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800268a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2222      	movs	r2, #34	; 0x22
 8002690:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2228      	movs	r2, #40	; 0x28
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff f9af 	bl	80019fe <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80026a0:	bf00      	nop
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d012      	beq.n	80026e0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr

080026ea <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b084      	sub	sp, #16
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80026f4:	2300      	movs	r3, #0
 80026f6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002704:	2b28      	cmp	r3, #40	; 0x28
 8002706:	d127      	bne.n	8002758 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002716:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	089b      	lsrs	r3, r3, #2
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002724:	2301      	movs	r3, #1
 8002726:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	09db      	lsrs	r3, r3, #7
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d103      	bne.n	800273c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	81bb      	strh	r3, [r7, #12]
 800273a:	e002      	b.n	8002742 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800274a:	89ba      	ldrh	r2, [r7, #12]
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	4619      	mov	r1, r3
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7ff f95d 	bl	8001a10 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002756:	e008      	b.n	800276a <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f06f 0202 	mvn.w	r2, #2
 8002760:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800276a:	bf00      	nop
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002782:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002792:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002794:	2300      	movs	r3, #0
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027c0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027d0:	d172      	bne.n	80028b8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
 80027d4:	2b22      	cmp	r3, #34	; 0x22
 80027d6:	d002      	beq.n	80027de <I2C_Slave_STOPF+0x6a>
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
 80027da:	2b2a      	cmp	r3, #42	; 0x2a
 80027dc:	d135      	bne.n	800284a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d005      	beq.n	8002802 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f043 0204 	orr.w	r2, r3, #4
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002810:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe fafa 	bl	8000e10 <HAL_DMA_GetState>
 800281c:	4603      	mov	r3, r0
 800281e:	2b01      	cmp	r3, #1
 8002820:	d049      	beq.n	80028b6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002826:	4a69      	ldr	r2, [pc, #420]	; (80029cc <I2C_Slave_STOPF+0x258>)
 8002828:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe f9e6 	bl	8000c00 <HAL_DMA_Abort_IT>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d03d      	beq.n	80028b6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002844:	4610      	mov	r0, r2
 8002846:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002848:	e035      	b.n	80028b6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	b29a      	uxth	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285c:	b29b      	uxth	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d005      	beq.n	800286e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f043 0204 	orr.w	r2, r3, #4
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800287c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe fac4 	bl	8000e10 <HAL_DMA_GetState>
 8002888:	4603      	mov	r3, r0
 800288a:	2b01      	cmp	r3, #1
 800288c:	d014      	beq.n	80028b8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002892:	4a4e      	ldr	r2, [pc, #312]	; (80029cc <I2C_Slave_STOPF+0x258>)
 8002894:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe f9b0 	bl	8000c00 <HAL_DMA_Abort_IT>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028b0:	4610      	mov	r0, r2
 80028b2:	4798      	blx	r3
 80028b4:	e000      	b.n	80028b8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80028b6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d03e      	beq.n	8002940 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d112      	bne.n	80028f6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	691a      	ldr	r2, [r3, #16]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002900:	2b40      	cmp	r3, #64	; 0x40
 8002902:	d112      	bne.n	800292a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	691a      	ldr	r2, [r3, #16]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	1c5a      	adds	r2, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002920:	b29b      	uxth	r3, r3
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292e:	b29b      	uxth	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f043 0204 	orr.w	r2, r3, #4
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f8b3 	bl	8002ab4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800294e:	e039      	b.n	80029c4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002950:	7bfb      	ldrb	r3, [r7, #15]
 8002952:	2b2a      	cmp	r3, #42	; 0x2a
 8002954:	d109      	bne.n	800296a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2228      	movs	r2, #40	; 0x28
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7ff f84a 	bl	80019fe <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b28      	cmp	r3, #40	; 0x28
 8002974:	d111      	bne.n	800299a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a15      	ldr	r2, [pc, #84]	; (80029d0 <I2C_Slave_STOPF+0x25c>)
 800297a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2220      	movs	r2, #32
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff f849 	bl	8001a2a <HAL_I2C_ListenCpltCallback>
}
 8002998:	e014      	b.n	80029c4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	2b22      	cmp	r3, #34	; 0x22
 80029a0:	d002      	beq.n	80029a8 <I2C_Slave_STOPF+0x234>
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	2b22      	cmp	r3, #34	; 0x22
 80029a6:	d10d      	bne.n	80029c4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff f81d 	bl	80019fe <HAL_I2C_SlaveRxCpltCallback>
}
 80029c4:	bf00      	nop
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	08002e45 	.word	0x08002e45
 80029d0:	ffff0000 	.word	0xffff0000

080029d4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d002      	beq.n	80029f6 <I2C_Slave_AF+0x22>
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b20      	cmp	r3, #32
 80029f4:	d129      	bne.n	8002a4a <I2C_Slave_AF+0x76>
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
 80029f8:	2b28      	cmp	r3, #40	; 0x28
 80029fa:	d126      	bne.n	8002a4a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a2c      	ldr	r2, [pc, #176]	; (8002ab0 <I2C_Slave_AF+0xdc>)
 8002a00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a10:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a1a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a2a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2220      	movs	r2, #32
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fe fff1 	bl	8001a2a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002a48:	e02e      	b.n	8002aa8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	2b21      	cmp	r3, #33	; 0x21
 8002a4e:	d126      	bne.n	8002a9e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a17      	ldr	r2, [pc, #92]	; (8002ab0 <I2C_Slave_AF+0xdc>)
 8002a54:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2221      	movs	r2, #33	; 0x21
 8002a5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a7a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a84:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a94:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fe ffa8 	bl	80019ec <HAL_I2C_SlaveTxCpltCallback>
}
 8002a9c:	e004      	b.n	8002aa8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002aa6:	615a      	str	r2, [r3, #20]
}
 8002aa8:	bf00      	nop
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	ffff0000 	.word	0xffff0000

08002ab4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002acc:	7bbb      	ldrb	r3, [r7, #14]
 8002ace:	2b10      	cmp	r3, #16
 8002ad0:	d002      	beq.n	8002ad8 <I2C_ITError+0x24>
 8002ad2:	7bbb      	ldrb	r3, [r7, #14]
 8002ad4:	2b40      	cmp	r3, #64	; 0x40
 8002ad6:	d10a      	bne.n	8002aee <I2C_ITError+0x3a>
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
 8002ada:	2b22      	cmp	r3, #34	; 0x22
 8002adc:	d107      	bne.n	8002aee <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aec:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002af4:	2b28      	cmp	r3, #40	; 0x28
 8002af6:	d107      	bne.n	8002b08 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2228      	movs	r2, #40	; 0x28
 8002b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b06:	e015      	b.n	8002b34 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b16:	d00a      	beq.n	8002b2e <I2C_ITError+0x7a>
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	2b60      	cmp	r3, #96	; 0x60
 8002b1c:	d007      	beq.n	8002b2e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2220      	movs	r2, #32
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b42:	d161      	bne.n	8002c08 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b52:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d020      	beq.n	8002ba2 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b64:	4a6a      	ldr	r2, [pc, #424]	; (8002d10 <I2C_ITError+0x25c>)
 8002b66:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fe f847 	bl	8000c00 <HAL_DMA_Abort_IT>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 8089 	beq.w	8002c8c <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0201 	bic.w	r2, r2, #1
 8002b88:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	4798      	blx	r3
 8002ba0:	e074      	b.n	8002c8c <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba6:	4a5a      	ldr	r2, [pc, #360]	; (8002d10 <I2C_ITError+0x25c>)
 8002ba8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe f826 	bl	8000c00 <HAL_DMA_Abort_IT>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d068      	beq.n	8002c8c <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc4:	2b40      	cmp	r3, #64	; 0x40
 8002bc6:	d10b      	bne.n	8002be0 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691a      	ldr	r2, [r3, #16]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0201 	bic.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c02:	4610      	mov	r0, r2
 8002c04:	4798      	blx	r3
 8002c06:	e041      	b.n	8002c8c <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b60      	cmp	r3, #96	; 0x60
 8002c12:	d125      	bne.n	8002c60 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2c:	2b40      	cmp	r3, #64	; 0x40
 8002c2e:	d10b      	bne.n	8002c48 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0201 	bic.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7fe ff0a 	bl	8001a72 <HAL_I2C_AbortCpltCallback>
 8002c5e:	e015      	b.n	8002c8c <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6a:	2b40      	cmp	r3, #64	; 0x40
 8002c6c:	d10b      	bne.n	8002c86 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fe feea 	bl	8001a60 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10e      	bne.n	8002cba <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d109      	bne.n	8002cba <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d104      	bne.n	8002cba <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d007      	beq.n	8002cca <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cc8:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd0:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d113      	bne.n	8002d06 <I2C_ITError+0x252>
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	2b28      	cmp	r3, #40	; 0x28
 8002ce2:	d110      	bne.n	8002d06 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a0b      	ldr	r2, [pc, #44]	; (8002d14 <I2C_ITError+0x260>)
 8002ce8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7fe fe92 	bl	8001a2a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d06:	bf00      	nop
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	08002e45 	.word	0x08002e45
 8002d14:	ffff0000 	.word	0xffff0000

08002d18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	4608      	mov	r0, r1
 8002d22:	4611      	mov	r1, r2
 8002d24:	461a      	mov	r2, r3
 8002d26:	4603      	mov	r3, r0
 8002d28:	817b      	strh	r3, [r7, #10]
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	813b      	strh	r3, [r7, #8]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f920 	bl	8002f94 <I2C_WaitOnFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00d      	beq.n	8002d76 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d68:	d103      	bne.n	8002d72 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e05f      	b.n	8002e36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d76:	897b      	ldrh	r3, [r7, #10]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	6a3a      	ldr	r2, [r7, #32]
 8002d8a:	492d      	ldr	r1, [pc, #180]	; (8002e40 <I2C_RequestMemoryWrite+0x128>)
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 f958 	bl	8003042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e04c      	b.n	8002e36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db4:	6a39      	ldr	r1, [r7, #32]
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f9c2 	bl	8003140 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00d      	beq.n	8002dde <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d107      	bne.n	8002dda <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e02b      	b.n	8002e36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d105      	bne.n	8002df0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002de4:	893b      	ldrh	r3, [r7, #8]
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	611a      	str	r2, [r3, #16]
 8002dee:	e021      	b.n	8002e34 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002df0:	893b      	ldrh	r3, [r7, #8]
 8002df2:	0a1b      	lsrs	r3, r3, #8
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e00:	6a39      	ldr	r1, [r7, #32]
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 f99c 	bl	8003140 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00d      	beq.n	8002e2a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d107      	bne.n	8002e26 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e005      	b.n	8002e36 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e2a:	893b      	ldrh	r3, [r7, #8]
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	00010002 	.word	0x00010002

08002e44 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e5e:	4b4b      	ldr	r3, [pc, #300]	; (8002f8c <I2C_DMAAbort+0x148>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	08db      	lsrs	r3, r3, #3
 8002e64:	4a4a      	ldr	r2, [pc, #296]	; (8002f90 <I2C_DMAAbort+0x14c>)
 8002e66:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6a:	0a1a      	lsrs	r2, r3, #8
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	00da      	lsls	r2, r3, #3
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d106      	bne.n	8002e8c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f043 0220 	orr.w	r2, r3, #32
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002e8a:	e00a      	b.n	8002ea2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ea0:	d0ea      	beq.n	8002e78 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eae:	2200      	movs	r2, #0
 8002eb0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b60      	cmp	r3, #96	; 0x60
 8002f12:	d10e      	bne.n	8002f32 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	2200      	movs	r2, #0
 8002f28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002f2a:	6978      	ldr	r0, [r7, #20]
 8002f2c:	f7fe fda1 	bl	8001a72 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f30:	e027      	b.n	8002f82 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f32:	7cfb      	ldrb	r3, [r7, #19]
 8002f34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f38:	2b28      	cmp	r3, #40	; 0x28
 8002f3a:	d117      	bne.n	8002f6c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f5a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2228      	movs	r2, #40	; 0x28
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f6a:	e007      	b.n	8002f7c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002f7c:	6978      	ldr	r0, [r7, #20]
 8002f7e:	f7fe fd6f 	bl	8001a60 <HAL_I2C_ErrorCallback>
}
 8002f82:	bf00      	nop
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000000 	.word	0x20000000
 8002f90:	14f8b589 	.word	0x14f8b589

08002f94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fa4:	e025      	b.n	8002ff2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fac:	d021      	beq.n	8002ff2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fae:	f7fd fced 	bl	800098c <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d302      	bcc.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d116      	bne.n	8002ff2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f043 0220 	orr.w	r2, r3, #32
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e023      	b.n	800303a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	0c1b      	lsrs	r3, r3, #16
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d10d      	bne.n	8003018 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	43da      	mvns	r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	4013      	ands	r3, r2
 8003008:	b29b      	uxth	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	bf0c      	ite	eq
 800300e:	2301      	moveq	r3, #1
 8003010:	2300      	movne	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	461a      	mov	r2, r3
 8003016:	e00c      	b.n	8003032 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	43da      	mvns	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4013      	ands	r3, r2
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	bf0c      	ite	eq
 800302a:	2301      	moveq	r3, #1
 800302c:	2300      	movne	r3, #0
 800302e:	b2db      	uxtb	r3, r3
 8003030:	461a      	mov	r2, r3
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	429a      	cmp	r2, r3
 8003036:	d0b6      	beq.n	8002fa6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003050:	e051      	b.n	80030f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003060:	d123      	bne.n	80030aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003070:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800307a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f043 0204 	orr.w	r2, r3, #4
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e046      	b.n	8003138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b0:	d021      	beq.n	80030f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b2:	f7fd fc6b 	bl	800098c <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d302      	bcc.n	80030c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d116      	bne.n	80030f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f043 0220 	orr.w	r2, r3, #32
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e020      	b.n	8003138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	0c1b      	lsrs	r3, r3, #16
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d10c      	bne.n	800311a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	43da      	mvns	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4013      	ands	r3, r2
 800310c:	b29b      	uxth	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	bf14      	ite	ne
 8003112:	2301      	movne	r3, #1
 8003114:	2300      	moveq	r3, #0
 8003116:	b2db      	uxtb	r3, r3
 8003118:	e00b      	b.n	8003132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	43da      	mvns	r2, r3
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	4013      	ands	r3, r2
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	bf14      	ite	ne
 800312c:	2301      	movne	r3, #1
 800312e:	2300      	moveq	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d18d      	bne.n	8003052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800314c:	e02d      	b.n	80031aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 f8aa 	bl	80032a8 <I2C_IsAcknowledgeFailed>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e02d      	b.n	80031ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003164:	d021      	beq.n	80031aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003166:	f7fd fc11 	bl	800098c <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	429a      	cmp	r2, r3
 8003174:	d302      	bcc.n	800317c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d116      	bne.n	80031aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2220      	movs	r2, #32
 8003186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f043 0220 	orr.w	r2, r3, #32
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e007      	b.n	80031ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b4:	2b80      	cmp	r3, #128	; 0x80
 80031b6:	d1ca      	bne.n	800314e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031ce:	e02d      	b.n	800322c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f869 	bl	80032a8 <I2C_IsAcknowledgeFailed>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e02d      	b.n	800323c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e6:	d021      	beq.n	800322c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e8:	f7fd fbd0 	bl	800098c <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d302      	bcc.n	80031fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d116      	bne.n	800322c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	f043 0220 	orr.w	r2, r3, #32
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e007      	b.n	800323c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b04      	cmp	r3, #4
 8003238:	d1ca      	bne.n	80031d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003250:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	08db      	lsrs	r3, r3, #3
 8003256:	4a13      	ldr	r2, [pc, #76]	; (80032a4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003258:	fba2 2303 	umull	r2, r3, r2, r3
 800325c:	0a1a      	lsrs	r2, r3, #8
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	3b01      	subs	r3, #1
 800326a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d107      	bne.n	8003282 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f043 0220 	orr.w	r2, r3, #32
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e008      	b.n	8003294 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800328c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003290:	d0e9      	beq.n	8003266 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	20000000 	.word	0x20000000
 80032a4:	14f8b589 	.word	0x14f8b589

080032a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032be:	d11b      	bne.n	80032f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	f043 0204 	orr.w	r2, r3, #4
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e000      	b.n	80032fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003314:	d103      	bne.n	800331e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800331c:	e007      	b.n	800332e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003322:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003326:	d102      	bne.n	800332e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2208      	movs	r2, #8
 800332c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr

08003338 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e26c      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 8087 	beq.w	8003466 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003358:	4b92      	ldr	r3, [pc, #584]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 030c 	and.w	r3, r3, #12
 8003360:	2b04      	cmp	r3, #4
 8003362:	d00c      	beq.n	800337e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003364:	4b8f      	ldr	r3, [pc, #572]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 030c 	and.w	r3, r3, #12
 800336c:	2b08      	cmp	r3, #8
 800336e:	d112      	bne.n	8003396 <HAL_RCC_OscConfig+0x5e>
 8003370:	4b8c      	ldr	r3, [pc, #560]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800337c:	d10b      	bne.n	8003396 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800337e:	4b89      	ldr	r3, [pc, #548]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d06c      	beq.n	8003464 <HAL_RCC_OscConfig+0x12c>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d168      	bne.n	8003464 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e246      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800339e:	d106      	bne.n	80033ae <HAL_RCC_OscConfig+0x76>
 80033a0:	4b80      	ldr	r3, [pc, #512]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a7f      	ldr	r2, [pc, #508]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	e02e      	b.n	800340c <HAL_RCC_OscConfig+0xd4>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x98>
 80033b6:	4b7b      	ldr	r3, [pc, #492]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a7a      	ldr	r2, [pc, #488]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	4b78      	ldr	r3, [pc, #480]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a77      	ldr	r2, [pc, #476]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	e01d      	b.n	800340c <HAL_RCC_OscConfig+0xd4>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033d8:	d10c      	bne.n	80033f4 <HAL_RCC_OscConfig+0xbc>
 80033da:	4b72      	ldr	r3, [pc, #456]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a71      	ldr	r2, [pc, #452]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	4b6f      	ldr	r3, [pc, #444]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a6e      	ldr	r2, [pc, #440]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	e00b      	b.n	800340c <HAL_RCC_OscConfig+0xd4>
 80033f4:	4b6b      	ldr	r3, [pc, #428]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a6a      	ldr	r2, [pc, #424]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80033fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	4b68      	ldr	r3, [pc, #416]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a67      	ldr	r2, [pc, #412]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800340a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d013      	beq.n	800343c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003414:	f7fd faba 	bl	800098c <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800341c:	f7fd fab6 	bl	800098c <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b64      	cmp	r3, #100	; 0x64
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e1fa      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342e:	4b5d      	ldr	r3, [pc, #372]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCC_OscConfig+0xe4>
 800343a:	e014      	b.n	8003466 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343c:	f7fd faa6 	bl	800098c <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003444:	f7fd faa2 	bl	800098c <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b64      	cmp	r3, #100	; 0x64
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e1e6      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003456:	4b53      	ldr	r3, [pc, #332]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x10c>
 8003462:	e000      	b.n	8003466 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d063      	beq.n	800353a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003472:	4b4c      	ldr	r3, [pc, #304]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00b      	beq.n	8003496 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800347e:	4b49      	ldr	r3, [pc, #292]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b08      	cmp	r3, #8
 8003488:	d11c      	bne.n	80034c4 <HAL_RCC_OscConfig+0x18c>
 800348a:	4b46      	ldr	r3, [pc, #280]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d116      	bne.n	80034c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003496:	4b43      	ldr	r3, [pc, #268]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d005      	beq.n	80034ae <HAL_RCC_OscConfig+0x176>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d001      	beq.n	80034ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e1ba      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ae:	4b3d      	ldr	r3, [pc, #244]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4939      	ldr	r1, [pc, #228]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c2:	e03a      	b.n	800353a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d020      	beq.n	800350e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034cc:	4b36      	ldr	r3, [pc, #216]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d2:	f7fd fa5b 	bl	800098c <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034da:	f7fd fa57 	bl	800098c <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e19b      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ec:	4b2d      	ldr	r3, [pc, #180]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f0      	beq.n	80034da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f8:	4b2a      	ldr	r3, [pc, #168]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	4927      	ldr	r1, [pc, #156]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003508:	4313      	orrs	r3, r2
 800350a:	600b      	str	r3, [r1, #0]
 800350c:	e015      	b.n	800353a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800350e:	4b26      	ldr	r3, [pc, #152]	; (80035a8 <HAL_RCC_OscConfig+0x270>)
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7fd fa3a 	bl	800098c <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800351c:	f7fd fa36 	bl	800098c <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e17a      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800352e:	4b1d      	ldr	r3, [pc, #116]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d03a      	beq.n	80035bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d019      	beq.n	8003582 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800354e:	4b17      	ldr	r3, [pc, #92]	; (80035ac <HAL_RCC_OscConfig+0x274>)
 8003550:	2201      	movs	r2, #1
 8003552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003554:	f7fd fa1a 	bl	800098c <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800355c:	f7fd fa16 	bl	800098c <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e15a      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356e:	4b0d      	ldr	r3, [pc, #52]	; (80035a4 <HAL_RCC_OscConfig+0x26c>)
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f0      	beq.n	800355c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800357a:	2001      	movs	r0, #1
 800357c:	f000 fac6 	bl	8003b0c <RCC_Delay>
 8003580:	e01c      	b.n	80035bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003582:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <HAL_RCC_OscConfig+0x274>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003588:	f7fd fa00 	bl	800098c <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800358e:	e00f      	b.n	80035b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003590:	f7fd f9fc 	bl	800098c <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d908      	bls.n	80035b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e140      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
 80035a2:	bf00      	nop
 80035a4:	40021000 	.word	0x40021000
 80035a8:	42420000 	.word	0x42420000
 80035ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b0:	4b9e      	ldr	r3, [pc, #632]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1e9      	bne.n	8003590 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 80a6 	beq.w	8003716 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ca:	2300      	movs	r3, #0
 80035cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ce:	4b97      	ldr	r3, [pc, #604]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10d      	bne.n	80035f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035da:	4b94      	ldr	r3, [pc, #592]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	4a93      	ldr	r2, [pc, #588]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 80035e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e4:	61d3      	str	r3, [r2, #28]
 80035e6:	4b91      	ldr	r3, [pc, #580]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ee:	60bb      	str	r3, [r7, #8]
 80035f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f2:	2301      	movs	r3, #1
 80035f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f6:	4b8e      	ldr	r3, [pc, #568]	; (8003830 <HAL_RCC_OscConfig+0x4f8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d118      	bne.n	8003634 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003602:	4b8b      	ldr	r3, [pc, #556]	; (8003830 <HAL_RCC_OscConfig+0x4f8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a8a      	ldr	r2, [pc, #552]	; (8003830 <HAL_RCC_OscConfig+0x4f8>)
 8003608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800360e:	f7fd f9bd 	bl	800098c <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003616:	f7fd f9b9 	bl	800098c <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b64      	cmp	r3, #100	; 0x64
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e0fd      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003628:	4b81      	ldr	r3, [pc, #516]	; (8003830 <HAL_RCC_OscConfig+0x4f8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d106      	bne.n	800364a <HAL_RCC_OscConfig+0x312>
 800363c:	4b7b      	ldr	r3, [pc, #492]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	4a7a      	ldr	r2, [pc, #488]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003642:	f043 0301 	orr.w	r3, r3, #1
 8003646:	6213      	str	r3, [r2, #32]
 8003648:	e02d      	b.n	80036a6 <HAL_RCC_OscConfig+0x36e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10c      	bne.n	800366c <HAL_RCC_OscConfig+0x334>
 8003652:	4b76      	ldr	r3, [pc, #472]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	4a75      	ldr	r2, [pc, #468]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003658:	f023 0301 	bic.w	r3, r3, #1
 800365c:	6213      	str	r3, [r2, #32]
 800365e:	4b73      	ldr	r3, [pc, #460]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	4a72      	ldr	r2, [pc, #456]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003664:	f023 0304 	bic.w	r3, r3, #4
 8003668:	6213      	str	r3, [r2, #32]
 800366a:	e01c      	b.n	80036a6 <HAL_RCC_OscConfig+0x36e>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	2b05      	cmp	r3, #5
 8003672:	d10c      	bne.n	800368e <HAL_RCC_OscConfig+0x356>
 8003674:	4b6d      	ldr	r3, [pc, #436]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	4a6c      	ldr	r2, [pc, #432]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 800367a:	f043 0304 	orr.w	r3, r3, #4
 800367e:	6213      	str	r3, [r2, #32]
 8003680:	4b6a      	ldr	r3, [pc, #424]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	4a69      	ldr	r2, [pc, #420]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	6213      	str	r3, [r2, #32]
 800368c:	e00b      	b.n	80036a6 <HAL_RCC_OscConfig+0x36e>
 800368e:	4b67      	ldr	r3, [pc, #412]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	4a66      	ldr	r2, [pc, #408]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003694:	f023 0301 	bic.w	r3, r3, #1
 8003698:	6213      	str	r3, [r2, #32]
 800369a:	4b64      	ldr	r3, [pc, #400]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	4a63      	ldr	r2, [pc, #396]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 80036a0:	f023 0304 	bic.w	r3, r3, #4
 80036a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d015      	beq.n	80036da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ae:	f7fd f96d 	bl	800098c <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b4:	e00a      	b.n	80036cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b6:	f7fd f969 	bl	800098c <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e0ab      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036cc:	4b57      	ldr	r3, [pc, #348]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0ee      	beq.n	80036b6 <HAL_RCC_OscConfig+0x37e>
 80036d8:	e014      	b.n	8003704 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036da:	f7fd f957 	bl	800098c <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036e0:	e00a      	b.n	80036f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e2:	f7fd f953 	bl	800098c <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e095      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f8:	4b4c      	ldr	r3, [pc, #304]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1ee      	bne.n	80036e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003704:	7dfb      	ldrb	r3, [r7, #23]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d105      	bne.n	8003716 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800370a:	4b48      	ldr	r3, [pc, #288]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	4a47      	ldr	r2, [pc, #284]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003714:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 8081 	beq.w	8003822 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003720:	4b42      	ldr	r3, [pc, #264]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 030c 	and.w	r3, r3, #12
 8003728:	2b08      	cmp	r3, #8
 800372a:	d061      	beq.n	80037f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	2b02      	cmp	r3, #2
 8003732:	d146      	bne.n	80037c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003734:	4b3f      	ldr	r3, [pc, #252]	; (8003834 <HAL_RCC_OscConfig+0x4fc>)
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373a:	f7fd f927 	bl	800098c <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003742:	f7fd f923 	bl	800098c <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e067      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003754:	4b35      	ldr	r3, [pc, #212]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1f0      	bne.n	8003742 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003768:	d108      	bne.n	800377c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800376a:	4b30      	ldr	r3, [pc, #192]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	492d      	ldr	r1, [pc, #180]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003778:	4313      	orrs	r3, r2
 800377a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800377c:	4b2b      	ldr	r3, [pc, #172]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a19      	ldr	r1, [r3, #32]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	430b      	orrs	r3, r1
 800378e:	4927      	ldr	r1, [pc, #156]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003794:	4b27      	ldr	r3, [pc, #156]	; (8003834 <HAL_RCC_OscConfig+0x4fc>)
 8003796:	2201      	movs	r2, #1
 8003798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379a:	f7fd f8f7 	bl	800098c <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a2:	f7fd f8f3 	bl	800098c <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e037      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037b4:	4b1d      	ldr	r3, [pc, #116]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x46a>
 80037c0:	e02f      	b.n	8003822 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c2:	4b1c      	ldr	r3, [pc, #112]	; (8003834 <HAL_RCC_OscConfig+0x4fc>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7fd f8e0 	bl	800098c <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d0:	f7fd f8dc 	bl	800098c <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e020      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e2:	4b12      	ldr	r3, [pc, #72]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0x498>
 80037ee:	e018      	b.n	8003822 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e013      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037fc:	4b0b      	ldr	r3, [pc, #44]	; (800382c <HAL_RCC_OscConfig+0x4f4>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	429a      	cmp	r2, r3
 800380e:	d106      	bne.n	800381e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d001      	beq.n	8003822 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40021000 	.word	0x40021000
 8003830:	40007000 	.word	0x40007000
 8003834:	42420060 	.word	0x42420060

08003838 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0d0      	b.n	80039ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800384c:	4b6a      	ldr	r3, [pc, #424]	; (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d910      	bls.n	800387c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385a:	4b67      	ldr	r3, [pc, #412]	; (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f023 0207 	bic.w	r2, r3, #7
 8003862:	4965      	ldr	r1, [pc, #404]	; (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	4313      	orrs	r3, r2
 8003868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800386a:	4b63      	ldr	r3, [pc, #396]	; (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d001      	beq.n	800387c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0b8      	b.n	80039ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d020      	beq.n	80038ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003894:	4b59      	ldr	r3, [pc, #356]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	4a58      	ldr	r2, [pc, #352]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 800389a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800389e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038ac:	4b53      	ldr	r3, [pc, #332]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	4a52      	ldr	r2, [pc, #328]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80038b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b8:	4b50      	ldr	r3, [pc, #320]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	494d      	ldr	r1, [pc, #308]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d040      	beq.n	8003958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d107      	bne.n	80038ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	4b47      	ldr	r3, [pc, #284]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d115      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e07f      	b.n	80039ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d107      	bne.n	8003906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f6:	4b41      	ldr	r3, [pc, #260]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d109      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e073      	b.n	80039ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003906:	4b3d      	ldr	r3, [pc, #244]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e06b      	b.n	80039ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003916:	4b39      	ldr	r3, [pc, #228]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f023 0203 	bic.w	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4936      	ldr	r1, [pc, #216]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 8003924:	4313      	orrs	r3, r2
 8003926:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003928:	f7fd f830 	bl	800098c <HAL_GetTick>
 800392c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	e00a      	b.n	8003946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003930:	f7fd f82c 	bl	800098c <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	; 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e053      	b.n	80039ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	4b2d      	ldr	r3, [pc, #180]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f003 020c 	and.w	r2, r3, #12
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	429a      	cmp	r2, r3
 8003956:	d1eb      	bne.n	8003930 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003958:	4b27      	ldr	r3, [pc, #156]	; (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d210      	bcs.n	8003988 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003966:	4b24      	ldr	r3, [pc, #144]	; (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f023 0207 	bic.w	r2, r3, #7
 800396e:	4922      	ldr	r1, [pc, #136]	; (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	4313      	orrs	r3, r2
 8003974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003976:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d001      	beq.n	8003988 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e032      	b.n	80039ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003994:	4b19      	ldr	r3, [pc, #100]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4916      	ldr	r1, [pc, #88]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039b2:	4b12      	ldr	r3, [pc, #72]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	490e      	ldr	r1, [pc, #56]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039c6:	f000 f821 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 80039ca:	4601      	mov	r1, r0
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	4a0a      	ldr	r2, [pc, #40]	; (8003a00 <HAL_RCC_ClockConfig+0x1c8>)
 80039d8:	5cd3      	ldrb	r3, [r2, r3]
 80039da:	fa21 f303 	lsr.w	r3, r1, r3
 80039de:	4a09      	ldr	r2, [pc, #36]	; (8003a04 <HAL_RCC_ClockConfig+0x1cc>)
 80039e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039e2:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <HAL_RCC_ClockConfig+0x1d0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fc ff8e 	bl	8000908 <HAL_InitTick>

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40022000 	.word	0x40022000
 80039fc:	40021000 	.word	0x40021000
 8003a00:	080043f4 	.word	0x080043f4
 8003a04:	20000000 	.word	0x20000000
 8003a08:	20000004 	.word	0x20000004

08003a0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a0c:	b490      	push	{r4, r7}
 8003a0e:	b08a      	sub	sp, #40	; 0x28
 8003a10:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a12:	4b2a      	ldr	r3, [pc, #168]	; (8003abc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a14:	1d3c      	adds	r4, r7, #4
 8003a16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a1c:	4b28      	ldr	r3, [pc, #160]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a1e:	881b      	ldrh	r3, [r3, #0]
 8003a20:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61fb      	str	r3, [r7, #28]
 8003a26:	2300      	movs	r3, #0
 8003a28:	61bb      	str	r3, [r7, #24]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a36:	4b23      	ldr	r3, [pc, #140]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d002      	beq.n	8003a4c <HAL_RCC_GetSysClockFreq+0x40>
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d003      	beq.n	8003a52 <HAL_RCC_GetSysClockFreq+0x46>
 8003a4a:	e02d      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a4c:	4b1e      	ldr	r3, [pc, #120]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a4e:	623b      	str	r3, [r7, #32]
      break;
 8003a50:	e02d      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	0c9b      	lsrs	r3, r3, #18
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a5e:	4413      	add	r3, r2
 8003a60:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a64:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d013      	beq.n	8003a98 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a70:	4b14      	ldr	r3, [pc, #80]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	0c5b      	lsrs	r3, r3, #17
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a7e:	4413      	add	r3, r2
 8003a80:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a84:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	4a0f      	ldr	r2, [pc, #60]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a8a:	fb02 f203 	mul.w	r2, r2, r3
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
 8003a96:	e004      	b.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	4a0c      	ldr	r2, [pc, #48]	; (8003acc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a9c:	fb02 f303 	mul.w	r3, r2, r3
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	623b      	str	r3, [r7, #32]
      break;
 8003aa6:	e002      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003aa8:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003aaa:	623b      	str	r3, [r7, #32]
      break;
 8003aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aae:	6a3b      	ldr	r3, [r7, #32]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3728      	adds	r7, #40	; 0x28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc90      	pop	{r4, r7}
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	08003bc8 	.word	0x08003bc8
 8003ac0:	08003bd8 	.word	0x08003bd8
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	007a1200 	.word	0x007a1200
 8003acc:	003d0900 	.word	0x003d0900

08003ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad4:	4b02      	ldr	r3, [pc, #8]	; (8003ae0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr
 8003ae0:	20000000 	.word	0x20000000

08003ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ae8:	f7ff fff2 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 8003aec:	4601      	mov	r1, r0
 8003aee:	4b05      	ldr	r3, [pc, #20]	; (8003b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	0a1b      	lsrs	r3, r3, #8
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	4a03      	ldr	r2, [pc, #12]	; (8003b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003afa:	5cd3      	ldrb	r3, [r2, r3]
 8003afc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40021000 	.word	0x40021000
 8003b08:	08004404 	.word	0x08004404

08003b0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b14:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <RCC_Delay+0x34>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a0a      	ldr	r2, [pc, #40]	; (8003b44 <RCC_Delay+0x38>)
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	0a5b      	lsrs	r3, r3, #9
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	fb02 f303 	mul.w	r3, r2, r3
 8003b26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b28:	bf00      	nop
  }
  while (Delay --);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1e5a      	subs	r2, r3, #1
 8003b2e:	60fa      	str	r2, [r7, #12]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1f9      	bne.n	8003b28 <RCC_Delay+0x1c>
}
 8003b34:	bf00      	nop
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	20000000 	.word	0x20000000
 8003b44:	10624dd3 	.word	0x10624dd3

08003b48 <__libc_init_array>:
 8003b48:	b570      	push	{r4, r5, r6, lr}
 8003b4a:	2500      	movs	r5, #0
 8003b4c:	4e0c      	ldr	r6, [pc, #48]	; (8003b80 <__libc_init_array+0x38>)
 8003b4e:	4c0d      	ldr	r4, [pc, #52]	; (8003b84 <__libc_init_array+0x3c>)
 8003b50:	1ba4      	subs	r4, r4, r6
 8003b52:	10a4      	asrs	r4, r4, #2
 8003b54:	42a5      	cmp	r5, r4
 8003b56:	d109      	bne.n	8003b6c <__libc_init_array+0x24>
 8003b58:	f000 f822 	bl	8003ba0 <_init>
 8003b5c:	2500      	movs	r5, #0
 8003b5e:	4e0a      	ldr	r6, [pc, #40]	; (8003b88 <__libc_init_array+0x40>)
 8003b60:	4c0a      	ldr	r4, [pc, #40]	; (8003b8c <__libc_init_array+0x44>)
 8003b62:	1ba4      	subs	r4, r4, r6
 8003b64:	10a4      	asrs	r4, r4, #2
 8003b66:	42a5      	cmp	r5, r4
 8003b68:	d105      	bne.n	8003b76 <__libc_init_array+0x2e>
 8003b6a:	bd70      	pop	{r4, r5, r6, pc}
 8003b6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b70:	4798      	blx	r3
 8003b72:	3501      	adds	r5, #1
 8003b74:	e7ee      	b.n	8003b54 <__libc_init_array+0xc>
 8003b76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b7a:	4798      	blx	r3
 8003b7c:	3501      	adds	r5, #1
 8003b7e:	e7f2      	b.n	8003b66 <__libc_init_array+0x1e>
 8003b80:	0800440c 	.word	0x0800440c
 8003b84:	0800440c 	.word	0x0800440c
 8003b88:	0800440c 	.word	0x0800440c
 8003b8c:	08004410 	.word	0x08004410

08003b90 <memset>:
 8003b90:	4603      	mov	r3, r0
 8003b92:	4402      	add	r2, r0
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d100      	bne.n	8003b9a <memset+0xa>
 8003b98:	4770      	bx	lr
 8003b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b9e:	e7f9      	b.n	8003b94 <memset+0x4>

08003ba0 <_init>:
 8003ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba2:	bf00      	nop
 8003ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba6:	bc08      	pop	{r3}
 8003ba8:	469e      	mov	lr, r3
 8003baa:	4770      	bx	lr

08003bac <_fini>:
 8003bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bae:	bf00      	nop
 8003bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bb2:	bc08      	pop	{r3}
 8003bb4:	469e      	mov	lr, r3
 8003bb6:	4770      	bx	lr
